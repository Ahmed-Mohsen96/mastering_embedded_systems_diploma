
MULTIPLEXING_7SEGEMENT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000de  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000410  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000012d  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000369  00000000  00000000  00000e65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000144  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b0  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/io.h>
#include<util/delay.h>
#define F_CPU 8000000UL
int main(void)
{
	DDRB =0xff;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
	int i,j;
    while(1)
    {
				
			for (i=0;i<10;i++)
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0

#include <avr/io.h>
#include<util/delay.h>
#define F_CPU 8000000UL
int main(void)
{
  9a:	70 e0       	ldi	r23, 0x00	; 0
	DDRB =0xff;
	int i,j;
    while(1)
    {
				
			for (i=0;i<10;i++)
  9c:	20 e0       	ldi	r18, 0x00	; 0
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	18 c0       	rjmp	.+48     	; 0xd2 <main+0x40>
			{
				for (j=0;j<10;j++)
				{
					PORTB=(0b0001<<4)|j ;
  a2:	54 2f       	mov	r21, r20
  a4:	50 61       	ori	r21, 0x10	; 16
  a6:	58 bb       	out	0x18, r21	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	e3 ed       	ldi	r30, 0xD3	; 211
  aa:	f0 e3       	ldi	r31, 0x30	; 48
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x1a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x20>
  b2:	00 00       	nop
					_delay_ms(50);
					
					PORTB=(0b0010<<4)|i ;
  b4:	68 bb       	out	0x18, r22	; 24
  b6:	e3 ed       	ldi	r30, 0xD3	; 211
  b8:	f0 e3       	ldi	r31, 0x30	; 48
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x28>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x2e>
  c0:	00 00       	nop
  c2:	4f 5f       	subi	r20, 0xFF	; 255
    while(1)
    {
				
			for (i=0;i<10;i++)
			{
				for (j=0;j<10;j++)
  c4:	4a 30       	cpi	r20, 0x0A	; 10
  c6:	69 f7       	brne	.-38     	; 0xa2 <main+0x10>
	DDRB =0xff;
	int i,j;
    while(1)
    {
				
			for (i=0;i<10;i++)
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	8a 30       	cpi	r24, 0x0A	; 10
  cc:	91 05       	cpc	r25, r1
  ce:	0c f0       	brlt	.+2      	; 0xd2 <main+0x40>
  d0:	c9 01       	movw	r24, r18

#include <avr/io.h>
#include<util/delay.h>
#define F_CPU 8000000UL
int main(void)
{
  d2:	47 2f       	mov	r20, r23
				for (j=0;j<10;j++)
				{
					PORTB=(0b0001<<4)|j ;
					_delay_ms(50);
					
					PORTB=(0b0010<<4)|i ;
  d4:	68 2f       	mov	r22, r24
  d6:	60 62       	ori	r22, 0x20	; 32
  d8:	e4 cf       	rjmp	.-56     	; 0xa2 <main+0x10>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>

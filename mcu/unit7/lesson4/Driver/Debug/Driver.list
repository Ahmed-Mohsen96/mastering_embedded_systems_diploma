
Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c64  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000d94  08000d94  00010d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dbc  08000dbc  00010dc4  2**0
                  CONTENTS
  4 .ARM          00000000  08000dbc  08000dbc  00010dc4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dbc  08000dc4  00010dc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dbc  08000dbc  00010dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dc0  08000dc0  00010dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010dc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000dc4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000dc4  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010dc4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000337e  00000000  00000000  00010ded  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000838  00000000  00000000  0001416b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009c0  00000000  00000000  000149a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  00015368  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  00015510  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000d37  00000000  00000000  00015670  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001dea  00000000  00000000  000163a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a56d  00000000  00000000  00018191  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000226fe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000538  00000000  00000000  0002277c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d7c 	.word	0x08000d7c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000d7c 	.word	0x08000d7c

08000170 <wait_ms>:
 *  Author: Marco
 */

#include "lcd.h"

void wait_ms(uint32_t time) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <wait_ms+0x26>
		for (j = 0; j < 255; j++)
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <wait_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <wait_ms+0x14>
	for (i = 0; i < time; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <wait_ms+0xe>
			;
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_GPIO_init>:

void LCD_GPIO_init() {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	PinCfg.GPIO_pin_number = RS_SWITCH;
 80001ac:	4b51      	ldr	r3, [pc, #324]	; (80002f4 <LCD_GPIO_init+0x14c>)
 80001ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001b2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_mode = GPIO_mode_OUTPUT_PP;
 80001b4:	4b4f      	ldr	r3, [pc, #316]	; (80002f4 <LCD_GPIO_init+0x14c>)
 80001b6:	2204      	movs	r2, #4
 80001b8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_speed = GPIO_SPEED_10M;
 80001ba:	4b4e      	ldr	r3, [pc, #312]	; (80002f4 <LCD_GPIO_init+0x14c>)
 80001bc:	2201      	movs	r2, #1
 80001be:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001c0:	494c      	ldr	r1, [pc, #304]	; (80002f4 <LCD_GPIO_init+0x14c>)
 80001c2:	484d      	ldr	r0, [pc, #308]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001c4:	f000 fd11 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_pin_number = RW_SWITCH;
 80001c8:	4b4a      	ldr	r3, [pc, #296]	; (80002f4 <LCD_GPIO_init+0x14c>)
 80001ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001ce:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_mode = GPIO_mode_OUTPUT_PP;
 80001d0:	4b48      	ldr	r3, [pc, #288]	; (80002f4 <LCD_GPIO_init+0x14c>)
 80001d2:	2204      	movs	r2, #4
 80001d4:	709a      	strb	r2, [r3, #2]
		PinCfg.GPIO_speed = GPIO_SPEED_10M;
 80001d6:	4b47      	ldr	r3, [pc, #284]	; (80002f4 <LCD_GPIO_init+0x14c>)
 80001d8:	2201      	movs	r2, #1
 80001da:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001dc:	4945      	ldr	r1, [pc, #276]	; (80002f4 <LCD_GPIO_init+0x14c>)
 80001de:	4846      	ldr	r0, [pc, #280]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001e0:	f000 fd03 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_pin_number = EN_SWITCH;
 80001e4:	4b43      	ldr	r3, [pc, #268]	; (80002f4 <LCD_GPIO_init+0x14c>)
 80001e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001ea:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_mode = GPIO_mode_OUTPUT_PP;
 80001ec:	4b41      	ldr	r3, [pc, #260]	; (80002f4 <LCD_GPIO_init+0x14c>)
 80001ee:	2204      	movs	r2, #4
 80001f0:	709a      	strb	r2, [r3, #2]
		PinCfg.GPIO_speed = GPIO_SPEED_10M;
 80001f2:	4b40      	ldr	r3, [pc, #256]	; (80002f4 <LCD_GPIO_init+0x14c>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001f8:	493e      	ldr	r1, [pc, #248]	; (80002f4 <LCD_GPIO_init+0x14c>)
 80001fa:	483f      	ldr	r0, [pc, #252]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001fc:	f000 fcf5 	bl	8000bea <MCAL_GPIO_Init>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.GPIO_pin_number = GPIO_PIN_0;
 8000200:	4b3c      	ldr	r3, [pc, #240]	; (80002f4 <LCD_GPIO_init+0x14c>)
 8000202:	2201      	movs	r2, #1
 8000204:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_mode = GPIO_mode_OUTPUT_PP;
 8000206:	4b3b      	ldr	r3, [pc, #236]	; (80002f4 <LCD_GPIO_init+0x14c>)
 8000208:	2204      	movs	r2, #4
 800020a:	709a      	strb	r2, [r3, #2]
		PinCfg.GPIO_speed = GPIO_SPEED_10M;
 800020c:	4b39      	ldr	r3, [pc, #228]	; (80002f4 <LCD_GPIO_init+0x14c>)
 800020e:	2201      	movs	r2, #1
 8000210:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000212:	4938      	ldr	r1, [pc, #224]	; (80002f4 <LCD_GPIO_init+0x14c>)
 8000214:	4838      	ldr	r0, [pc, #224]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000216:	f000 fce8 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_pin_number = GPIO_PIN_1;
 800021a:	4b36      	ldr	r3, [pc, #216]	; (80002f4 <LCD_GPIO_init+0x14c>)
 800021c:	2202      	movs	r2, #2
 800021e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_mode = GPIO_mode_OUTPUT_PP;
 8000220:	4b34      	ldr	r3, [pc, #208]	; (80002f4 <LCD_GPIO_init+0x14c>)
 8000222:	2204      	movs	r2, #4
 8000224:	709a      	strb	r2, [r3, #2]
		PinCfg.GPIO_speed = GPIO_SPEED_10M;
 8000226:	4b33      	ldr	r3, [pc, #204]	; (80002f4 <LCD_GPIO_init+0x14c>)
 8000228:	2201      	movs	r2, #1
 800022a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800022c:	4931      	ldr	r1, [pc, #196]	; (80002f4 <LCD_GPIO_init+0x14c>)
 800022e:	4832      	ldr	r0, [pc, #200]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000230:	f000 fcdb 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_pin_number = GPIO_PIN_2;
 8000234:	4b2f      	ldr	r3, [pc, #188]	; (80002f4 <LCD_GPIO_init+0x14c>)
 8000236:	2204      	movs	r2, #4
 8000238:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_mode = GPIO_mode_OUTPUT_PP;
 800023a:	4b2e      	ldr	r3, [pc, #184]	; (80002f4 <LCD_GPIO_init+0x14c>)
 800023c:	2204      	movs	r2, #4
 800023e:	709a      	strb	r2, [r3, #2]
		PinCfg.GPIO_speed = GPIO_SPEED_10M;
 8000240:	4b2c      	ldr	r3, [pc, #176]	; (80002f4 <LCD_GPIO_init+0x14c>)
 8000242:	2201      	movs	r2, #1
 8000244:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000246:	492b      	ldr	r1, [pc, #172]	; (80002f4 <LCD_GPIO_init+0x14c>)
 8000248:	482b      	ldr	r0, [pc, #172]	; (80002f8 <LCD_GPIO_init+0x150>)
 800024a:	f000 fcce 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_pin_number = GPIO_PIN_3;
 800024e:	4b29      	ldr	r3, [pc, #164]	; (80002f4 <LCD_GPIO_init+0x14c>)
 8000250:	2208      	movs	r2, #8
 8000252:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_mode = GPIO_mode_OUTPUT_PP;
 8000254:	4b27      	ldr	r3, [pc, #156]	; (80002f4 <LCD_GPIO_init+0x14c>)
 8000256:	2204      	movs	r2, #4
 8000258:	709a      	strb	r2, [r3, #2]
		PinCfg.GPIO_speed = GPIO_SPEED_10M;
 800025a:	4b26      	ldr	r3, [pc, #152]	; (80002f4 <LCD_GPIO_init+0x14c>)
 800025c:	2201      	movs	r2, #1
 800025e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000260:	4924      	ldr	r1, [pc, #144]	; (80002f4 <LCD_GPIO_init+0x14c>)
 8000262:	4825      	ldr	r0, [pc, #148]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000264:	f000 fcc1 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_pin_number = GPIO_PIN_4;
 8000268:	4b22      	ldr	r3, [pc, #136]	; (80002f4 <LCD_GPIO_init+0x14c>)
 800026a:	2210      	movs	r2, #16
 800026c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_mode = GPIO_mode_OUTPUT_PP;
 800026e:	4b21      	ldr	r3, [pc, #132]	; (80002f4 <LCD_GPIO_init+0x14c>)
 8000270:	2204      	movs	r2, #4
 8000272:	709a      	strb	r2, [r3, #2]
		PinCfg.GPIO_speed = GPIO_SPEED_10M;
 8000274:	4b1f      	ldr	r3, [pc, #124]	; (80002f4 <LCD_GPIO_init+0x14c>)
 8000276:	2201      	movs	r2, #1
 8000278:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800027a:	491e      	ldr	r1, [pc, #120]	; (80002f4 <LCD_GPIO_init+0x14c>)
 800027c:	481e      	ldr	r0, [pc, #120]	; (80002f8 <LCD_GPIO_init+0x150>)
 800027e:	f000 fcb4 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_pin_number = GPIO_PIN_5;
 8000282:	4b1c      	ldr	r3, [pc, #112]	; (80002f4 <LCD_GPIO_init+0x14c>)
 8000284:	2220      	movs	r2, #32
 8000286:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_mode = GPIO_mode_OUTPUT_PP;
 8000288:	4b1a      	ldr	r3, [pc, #104]	; (80002f4 <LCD_GPIO_init+0x14c>)
 800028a:	2204      	movs	r2, #4
 800028c:	709a      	strb	r2, [r3, #2]
		PinCfg.GPIO_speed = GPIO_SPEED_10M;
 800028e:	4b19      	ldr	r3, [pc, #100]	; (80002f4 <LCD_GPIO_init+0x14c>)
 8000290:	2201      	movs	r2, #1
 8000292:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000294:	4917      	ldr	r1, [pc, #92]	; (80002f4 <LCD_GPIO_init+0x14c>)
 8000296:	4818      	ldr	r0, [pc, #96]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000298:	f000 fca7 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_pin_number = GPIO_PIN_6;
 800029c:	4b15      	ldr	r3, [pc, #84]	; (80002f4 <LCD_GPIO_init+0x14c>)
 800029e:	2240      	movs	r2, #64	; 0x40
 80002a0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_mode = GPIO_mode_OUTPUT_PP;
 80002a2:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <LCD_GPIO_init+0x14c>)
 80002a4:	2204      	movs	r2, #4
 80002a6:	709a      	strb	r2, [r3, #2]
		PinCfg.GPIO_speed = GPIO_SPEED_10M;
 80002a8:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <LCD_GPIO_init+0x14c>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002ae:	4911      	ldr	r1, [pc, #68]	; (80002f4 <LCD_GPIO_init+0x14c>)
 80002b0:	4811      	ldr	r0, [pc, #68]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002b2:	f000 fc9a 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_pin_number = GPIO_PIN_7;
 80002b6:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <LCD_GPIO_init+0x14c>)
 80002b8:	2280      	movs	r2, #128	; 0x80
 80002ba:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_mode = GPIO_mode_OUTPUT_PP;
 80002bc:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <LCD_GPIO_init+0x14c>)
 80002be:	2204      	movs	r2, #4
 80002c0:	709a      	strb	r2, [r3, #2]
		PinCfg.GPIO_speed = GPIO_SPEED_10M;
 80002c2:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <LCD_GPIO_init+0x14c>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002c8:	490a      	ldr	r1, [pc, #40]	; (80002f4 <LCD_GPIO_init+0x14c>)
 80002ca:	480b      	ldr	r0, [pc, #44]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002cc:	f000 fc8d 	bl	8000bea <MCAL_GPIO_Init>

	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2100      	movs	r1, #0
 80002d4:	4808      	ldr	r0, [pc, #32]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002d6:	f000 fd07 	bl	8000ce8 <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2100      	movs	r1, #0
 80002de:	4806      	ldr	r0, [pc, #24]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002e0:	f000 fd02 	bl	8000ce8 <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2100      	movs	r1, #0
 80002e8:	4803      	ldr	r0, [pc, #12]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002ea:	f000 fcfd 	bl	8000ce8 <MCAL_GPIO_WRITE_PIN>

}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	2000001c 	.word	0x2000001c
 80002f8:	40010800 	.word	0x40010800

080002fc <LCD_clear_screen>:

void LCD_clear_screen() {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000300:	2001      	movs	r0, #1
 8000302:	f000 f855 	bl	80003b0 <LCD_WRITE_COMMAND>
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
	...

0800030c <LCD_lcd_kick>:

void LCD_lcd_kick() {
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000310:	2201      	movs	r2, #1
 8000312:	2100      	movs	r1, #0
 8000314:	4806      	ldr	r0, [pc, #24]	; (8000330 <LCD_lcd_kick+0x24>)
 8000316:	f000 fce7 	bl	8000ce8 <MCAL_GPIO_WRITE_PIN>
	wait_ms(50);
 800031a:	2032      	movs	r0, #50	; 0x32
 800031c:	f7ff ff28 	bl	8000170 <wait_ms>
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	2100      	movs	r1, #0
 8000324:	4802      	ldr	r0, [pc, #8]	; (8000330 <LCD_lcd_kick+0x24>)
 8000326:	f000 fcdf 	bl	8000ce8 <MCAL_GPIO_WRITE_PIN>
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40010800 	.word	0x40010800

08000334 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position) {
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	460a      	mov	r2, r1
 800033e:	71fb      	strb	r3, [r7, #7]
 8000340:	4613      	mov	r3, r2
 8000342:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d108      	bne.n	800035c <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 800034a:	79bb      	ldrb	r3, [r7, #6]
 800034c:	2b0f      	cmp	r3, #15
 800034e:	d805      	bhi.n	800035c <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 8000350:	79bb      	ldrb	r3, [r7, #6]
 8000352:	3b80      	subs	r3, #128	; 0x80
 8000354:	b2db      	uxtb	r3, r3
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f82a 	bl	80003b0 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	2b02      	cmp	r3, #2
 8000360:	d108      	bne.n	8000374 <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 8000362:	79bb      	ldrb	r3, [r7, #6]
 8000364:	2b0f      	cmp	r3, #15
 8000366:	d805      	bhi.n	8000374 <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 8000368:	79bb      	ldrb	r3, [r7, #6]
 800036a:	3b40      	subs	r3, #64	; 0x40
 800036c:	b2db      	uxtb	r3, r3
 800036e:	4618      	mov	r0, r3
 8000370:	f000 f81e 	bl	80003b0 <LCD_WRITE_COMMAND>
		}
	}
}
 8000374:	bf00      	nop
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <LCD_INIT>:

void LCD_INIT() {
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0

	wait_ms(20);
 8000380:	2014      	movs	r0, #20
 8000382:	f7ff fef5 	bl	8000170 <wait_ms>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 8000386:	f7ff ff0f 	bl	80001a8 <LCD_GPIO_init>
//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
//	DataDir_LCD_PORT = 0xFF;
	wait_ms(15);
 800038a:	200f      	movs	r0, #15
 800038c:	f7ff fef0 	bl	8000170 <wait_ms>

	LCD_clear_screen();
 8000390:	f7ff ffb4 	bl	80002fc <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000394:	2038      	movs	r0, #56	; 0x38
 8000396:	f000 f80b 	bl	80003b0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 800039a:	2006      	movs	r0, #6
 800039c:	f000 f808 	bl	80003b0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 80003a0:	2080      	movs	r0, #128	; 0x80
 80003a2:	f000 f805 	bl	80003b0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80003a6:	200f      	movs	r0, #15
 80003a8:	f000 f802 	bl	80003b0 <LCD_WRITE_COMMAND>
}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(unsigned char command) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
	MCAL_GPIO_WRITE_PORT(LCD_CTRL, command);
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	b29b      	uxth	r3, r3
 80003be:	4619      	mov	r1, r3
 80003c0:	480a      	ldr	r0, [pc, #40]	; (80003ec <LCD_WRITE_COMMAND+0x3c>)
 80003c2:	f000 fca8 	bl	8000d16 <MCAL_GPIO_WRITE_PORT>
//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
//	LCD_CTRL->CRL = command;
//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	2100      	movs	r1, #0
 80003ca:	4808      	ldr	r0, [pc, #32]	; (80003ec <LCD_WRITE_COMMAND+0x3c>)
 80003cc:	f000 fc8c 	bl	8000ce8 <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2100      	movs	r1, #0
 80003d4:	4805      	ldr	r0, [pc, #20]	; (80003ec <LCD_WRITE_COMMAND+0x3c>)
 80003d6:	f000 fc87 	bl	8000ce8 <MCAL_GPIO_WRITE_PIN>
//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	wait_ms(1);
 80003da:	2001      	movs	r0, #1
 80003dc:	f7ff fec8 	bl	8000170 <wait_ms>
	LCD_lcd_kick();
 80003e0:	f7ff ff94 	bl	800030c <LCD_lcd_kick>

}
 80003e4:	bf00      	nop
 80003e6:	3708      	adds	r7, #8
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40010800 	.word	0x40010800

080003f0 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
//	LCD_CTRL->CRL = character;
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ character) & 0x00ff;
	MCAL_GPIO_WRITE_PORT(LCD_CTRL, character);
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	b29b      	uxth	r3, r3
 80003fe:	4619      	mov	r1, r3
 8000400:	480a      	ldr	r0, [pc, #40]	; (800042c <LCD_WRITE_CHAR+0x3c>)
 8000402:	f000 fc88 	bl	8000d16 <MCAL_GPIO_WRITE_PORT>
//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2100      	movs	r1, #0
 800040a:	4808      	ldr	r0, [pc, #32]	; (800042c <LCD_WRITE_CHAR+0x3c>)
 800040c:	f000 fc6c 	bl	8000ce8 <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 8000410:	2201      	movs	r2, #1
 8000412:	2100      	movs	r1, #0
 8000414:	4805      	ldr	r0, [pc, #20]	; (800042c <LCD_WRITE_CHAR+0x3c>)
 8000416:	f000 fc67 	bl	8000ce8 <MCAL_GPIO_WRITE_PIN>
//	LCD_CTRL &= ~(1 << RW_SWITCH);
//	LCD_CTRL |= (1 << RS_SWITCH);
	wait_ms(1);
 800041a:	2001      	movs	r0, #1
 800041c:	f7ff fea8 	bl	8000170 <wait_ms>
	LCD_lcd_kick();
 8000420:	f7ff ff74 	bl	800030c <LCD_lcd_kick>
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	40010800 	.word	0x40010800

08000430 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char *string) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 800043c:	e01c      	b.n	8000478 <LCD_WRITE_STRING+0x48>
		count++;
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	3301      	adds	r3, #1
 8000442:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	1c5a      	adds	r2, r3, #1
 8000448:	607a      	str	r2, [r7, #4]
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ffcf 	bl	80003f0 <LCD_WRITE_CHAR>
		if (count == 16) {
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	2b10      	cmp	r3, #16
 8000456:	d104      	bne.n	8000462 <LCD_WRITE_STRING+0x32>
			LCD_GOTO_XY(2, 0);
 8000458:	2100      	movs	r1, #0
 800045a:	2002      	movs	r0, #2
 800045c:	f7ff ff6a 	bl	8000334 <LCD_GOTO_XY>
 8000460:	e00a      	b.n	8000478 <LCD_WRITE_STRING+0x48>
		} else if (count == 32) {
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	2b20      	cmp	r3, #32
 8000466:	d107      	bne.n	8000478 <LCD_WRITE_STRING+0x48>
			LCD_clear_screen();
 8000468:	f7ff ff48 	bl	80002fc <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 800046c:	2100      	movs	r1, #0
 800046e:	2001      	movs	r0, #1
 8000470:	f7ff ff60 	bl	8000334 <LCD_GOTO_XY>
			count = 0;
 8000474:	2300      	movs	r3, #0
 8000476:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d1de      	bne.n	800043e <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000480:	bf00      	nop
 8000482:	3710      	adds	r7, #16
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}

08000488 <EXTI9_CALL_BACK>:

}
extern void wait_ms();
uint8_t IRQ_flag;
void EXTI9_CALL_BACK(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	IRQ_flag=1;
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <EXTI9_CALL_BACK+0x1c>)
 800048e:	2201      	movs	r2, #1
 8000490:	701a      	strb	r2, [r3, #0]
	LCD_WRITE_STRING("IRQ EXTI9 is happened _|- ");
 8000492:	4805      	ldr	r0, [pc, #20]	; (80004a8 <EXTI9_CALL_BACK+0x20>)
 8000494:	f7ff ffcc 	bl	8000430 <LCD_WRITE_STRING>
	wait_ms(1000);
 8000498:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800049c:	f7ff fe68 	bl	8000170 <wait_ms>
}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	20000020 	.word	0x20000020
 80004a8:	08000d94 	.word	0x08000d94

080004ac <main>:


int main(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af00      	add	r7, sp, #0
	//ENABLE clock
	GPIOA_EN_CLK();
 80004b2:	4b19      	ldr	r3, [pc, #100]	; (8000518 <main+0x6c>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	4a18      	ldr	r2, [pc, #96]	; (8000518 <main+0x6c>)
 80004b8:	f043 0304 	orr.w	r3, r3, #4
 80004bc:	6193      	str	r3, [r2, #24]
	GPIOB_EN_CLK();
 80004be:	4b16      	ldr	r3, [pc, #88]	; (8000518 <main+0x6c>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	4a15      	ldr	r2, [pc, #84]	; (8000518 <main+0x6c>)
 80004c4:	f043 0308 	orr.w	r3, r3, #8
 80004c8:	6193      	str	r3, [r2, #24]
	AFIO_EN_CLK();
 80004ca:	4b13      	ldr	r3, [pc, #76]	; (8000518 <main+0x6c>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	4a12      	ldr	r2, [pc, #72]	; (8000518 <main+0x6c>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6193      	str	r3, [r2, #24]

	LCD_INIT();
 80004d6:	f7ff ff51 	bl	800037c <LCD_INIT>
	LCD_clear_screen();
 80004da:	f7ff ff0f 	bl	80002fc <LCD_clear_screen>

	EXTI_pinconfig_t EXTIcfg;
	EXTIcfg.EXTI_pin=EXTI9_PB9;
 80004de:	4a0f      	ldr	r2, [pc, #60]	; (800051c <main+0x70>)
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80004e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTIcfg.TRIGER_Case=EXTI_TRIGGER_RISING;
 80004e8:	2300      	movs	r3, #0
 80004ea:	743b      	strb	r3, [r7, #16]
	EXTIcfg.p_IRQ_CALLBACk=EXTI9_CALL_BACK;
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <main+0x74>)
 80004ee:	617b      	str	r3, [r7, #20]
	EXTIcfg.IRQ_EN=EXTI_IRQ_Enable;
 80004f0:	2301      	movs	r3, #1
 80004f2:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_GPIO_Init(&EXTIcfg);
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	4618      	mov	r0, r3
 80004f8:	f000 f9f8 	bl	80008ec <MCAL_EXTI_GPIO_Init>
//	lcd_clear_screen();
//	Keypad_init();
//	lcd_send_string ("Keypad is ready");
//	wait_ms(30);
//	lcd_clear_screen();
	 IRQ_flag=1;
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <main+0x78>)
 80004fe:	2201      	movs	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]
	while (1) {
		if(IRQ_flag==1)
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <main+0x78>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d1fb      	bne.n	8000502 <main+0x56>
		{
			LCD_clear_screen();
 800050a:	f7ff fef7 	bl	80002fc <LCD_clear_screen>
			IRQ_flag=0;
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <main+0x78>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
		if(IRQ_flag==1)
 8000514:	e7f5      	b.n	8000502 <main+0x56>
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000
 800051c:	08000db0 	.word	0x08000db0
 8000520:	08000489 	.word	0x08000489
 8000524:	20000020 	.word	0x20000020

08000528 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800052a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800052c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000530:	480c      	ldr	r0, [pc, #48]	; (8000564 <LoopForever+0x6>)
  ldr r1, =_edata
 8000532:	490d      	ldr	r1, [pc, #52]	; (8000568 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000534:	4a0d      	ldr	r2, [pc, #52]	; (800056c <LoopForever+0xe>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000538:	e002      	b.n	8000540 <LoopCopyDataInit>

0800053a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800053c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053e:	3304      	adds	r3, #4

08000540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000544:	d3f9      	bcc.n	800053a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000546:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000548:	4c0a      	ldr	r4, [pc, #40]	; (8000574 <LoopForever+0x16>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800054c:	e001      	b.n	8000552 <LoopFillZerobss>

0800054e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000550:	3204      	adds	r2, #4

08000552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000554:	d3fb      	bcc.n	800054e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000556:	f000 fbed 	bl	8000d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055a:	f7ff ffa7 	bl	80004ac <main>

0800055e <LoopForever>:

LoopForever:
    b LoopForever
 800055e:	e7fe      	b.n	800055e <LoopForever>
  ldr   r0, =_estack
 8000560:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000568:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800056c:	08000dc4 	.word	0x08000dc4
  ldr r2, =_sbss
 8000570:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000574:	20000060 	.word	0x20000060

08000578 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000578:	e7fe      	b.n	8000578 <ADC1_2_IRQHandler>
	...

0800057c <Enable_NVIC>:
/*
 *   GENERIC FUNCTION
 */


void Enable_NVIC(uint8_t IRQ){
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
	switch (IRQ)
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	d854      	bhi.n	8000636 <Enable_NVIC+0xba>
 800058c:	a201      	add	r2, pc, #4	; (adr r2, 8000594 <Enable_NVIC+0x18>)
 800058e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000592:	bf00      	nop
 8000594:	080005d5 	.word	0x080005d5
 8000598:	080005e3 	.word	0x080005e3
 800059c:	080005f1 	.word	0x080005f1
 80005a0:	080005ff 	.word	0x080005ff
 80005a4:	0800060d 	.word	0x0800060d
 80005a8:	0800061b 	.word	0x0800061b
 80005ac:	0800061b 	.word	0x0800061b
 80005b0:	0800061b 	.word	0x0800061b
 80005b4:	0800061b 	.word	0x0800061b
 80005b8:	0800061b 	.word	0x0800061b
 80005bc:	08000629 	.word	0x08000629
 80005c0:	08000629 	.word	0x08000629
 80005c4:	08000629 	.word	0x08000629
 80005c8:	08000629 	.word	0x08000629
 80005cc:	08000629 	.word	0x08000629
 80005d0:	08000629 	.word	0x08000629
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 80005d4:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <Enable_NVIC+0xc4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a19      	ldr	r2, [pc, #100]	; (8000640 <Enable_NVIC+0xc4>)
 80005da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005de:	6013      	str	r3, [r2, #0]
		break;
 80005e0:	e029      	b.n	8000636 <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <Enable_NVIC+0xc4>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a16      	ldr	r2, [pc, #88]	; (8000640 <Enable_NVIC+0xc4>)
 80005e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ec:	6013      	str	r3, [r2, #0]
		break;
 80005ee:	e022      	b.n	8000636 <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <Enable_NVIC+0xc4>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a12      	ldr	r2, [pc, #72]	; (8000640 <Enable_NVIC+0xc4>)
 80005f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005fa:	6013      	str	r3, [r2, #0]
		break;
 80005fc:	e01b      	b.n	8000636 <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <Enable_NVIC+0xc4>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a0f      	ldr	r2, [pc, #60]	; (8000640 <Enable_NVIC+0xc4>)
 8000604:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000608:	6013      	str	r3, [r2, #0]
		break;
 800060a:	e014      	b.n	8000636 <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <Enable_NVIC+0xc4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a0b      	ldr	r2, [pc, #44]	; (8000640 <Enable_NVIC+0xc4>)
 8000612:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000616:	6013      	str	r3, [r2, #0]
		break;
 8000618:	e00d      	b.n	8000636 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <Enable_NVIC+0xc4>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <Enable_NVIC+0xc4>)
 8000620:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000624:	6013      	str	r3, [r2, #0]
		break;
 8000626:	e006      	b.n	8000636 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <Enable_NVIC+0xc8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a05      	ldr	r2, [pc, #20]	; (8000644 <Enable_NVIC+0xc8>)
 800062e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000632:	6013      	str	r3, [r2, #0]
		break;
 8000634:	bf00      	nop


	}

}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	e000e100 	.word	0xe000e100
 8000644:	e000e104 	.word	0xe000e104

08000648 <disable_NVIC>:

void disable_NVIC(uint8_t IRQ){
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	switch (IRQ)
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b0f      	cmp	r3, #15
 8000656:	d854      	bhi.n	8000702 <disable_NVIC+0xba>
 8000658:	a201      	add	r2, pc, #4	; (adr r2, 8000660 <disable_NVIC+0x18>)
 800065a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065e:	bf00      	nop
 8000660:	080006a1 	.word	0x080006a1
 8000664:	080006af 	.word	0x080006af
 8000668:	080006bd 	.word	0x080006bd
 800066c:	080006cb 	.word	0x080006cb
 8000670:	080006d9 	.word	0x080006d9
 8000674:	080006e7 	.word	0x080006e7
 8000678:	080006e7 	.word	0x080006e7
 800067c:	080006e7 	.word	0x080006e7
 8000680:	080006e7 	.word	0x080006e7
 8000684:	080006e7 	.word	0x080006e7
 8000688:	080006f5 	.word	0x080006f5
 800068c:	080006f5 	.word	0x080006f5
 8000690:	080006f5 	.word	0x080006f5
 8000694:	080006f5 	.word	0x080006f5
 8000698:	080006f5 	.word	0x080006f5
 800069c:	080006f5 	.word	0x080006f5
	{
	case 0:
		NVIC_IRQ6_EXTI0_disable;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <disable_NVIC+0xc4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a19      	ldr	r2, [pc, #100]	; (800070c <disable_NVIC+0xc4>)
 80006a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006aa:	6013      	str	r3, [r2, #0]
		break;
 80006ac:	e029      	b.n	8000702 <disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_disable;
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <disable_NVIC+0xc4>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a16      	ldr	r2, [pc, #88]	; (800070c <disable_NVIC+0xc4>)
 80006b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b8:	6013      	str	r3, [r2, #0]
		break;
 80006ba:	e022      	b.n	8000702 <disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_disable;
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <disable_NVIC+0xc4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a12      	ldr	r2, [pc, #72]	; (800070c <disable_NVIC+0xc4>)
 80006c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c6:	6013      	str	r3, [r2, #0]
		break;
 80006c8:	e01b      	b.n	8000702 <disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_disable;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <disable_NVIC+0xc4>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a0f      	ldr	r2, [pc, #60]	; (800070c <disable_NVIC+0xc4>)
 80006d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006d4:	6013      	str	r3, [r2, #0]
		break;
 80006d6:	e014      	b.n	8000702 <disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_disable;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <disable_NVIC+0xc4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a0b      	ldr	r2, [pc, #44]	; (800070c <disable_NVIC+0xc4>)
 80006de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006e2:	6013      	str	r3, [r2, #0]
		break;
 80006e4:	e00d      	b.n	8000702 <disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_disable;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <disable_NVIC+0xc4>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a08      	ldr	r2, [pc, #32]	; (800070c <disable_NVIC+0xc4>)
 80006ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006f0:	6013      	str	r3, [r2, #0]
		break;
 80006f2:	e006      	b.n	8000702 <disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_disable;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <disable_NVIC+0xc8>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a05      	ldr	r2, [pc, #20]	; (8000710 <disable_NVIC+0xc8>)
 80006fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006fe:	6013      	str	r3, [r2, #0]
		break;
 8000700:	bf00      	nop


	}

}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	e000e180 	.word	0xe000e180
 8000710:	e000e184 	.word	0xe000e184

08000714 <UPDATE_EXTI>:
void UPDATE_EXTI(EXTI_pinconfig_t* EXTI_Config){
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	// 1- configure GPIO to be AF input -> floating input
	GPIO_PIN_Config_t pincfg;
	pincfg.GPIO_pin_number=EXTI_Config->EXTI_pin.GPIO_pin;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	891b      	ldrh	r3, [r3, #8]
 8000720:	813b      	strh	r3, [r7, #8]
	pincfg.GPIO_mode=GPIO_mode_INPUT_flo;
 8000722:	2301      	movs	r3, #1
 8000724:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_pin.GPIO_port, &pincfg);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	f107 0208 	add.w	r2, r7, #8
 800072e:	4611      	mov	r1, r2
 8000730:	4618      	mov	r0, r3
 8000732:	f000 fa5a 	bl	8000bea <MCAL_GPIO_Init>
	///////////////////////////////////////////////////////////
	// 2- update AFIO to route between EXTI line with port A,B,C,D
	uint8_t AFIO_EXTICR_index=EXTI_Config->EXTI_pin.EXTI_inputlinenubmer /4;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	089b      	lsrs	r3, r3, #2
 800073c:	b29b      	uxth	r3, r3
 800073e:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_position=(EXTI_Config->EXTI_pin.EXTI_inputlinenubmer /4)*4;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	089b      	lsrs	r3, r3, #2
 8000746:	b29b      	uxth	r3, r3
 8000748:	b2db      	uxtb	r3, r3
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	73bb      	strb	r3, [r7, #14]

	//clear the four bit
	AFIO->EXTICR[AFIO_EXTICR_index] &=~(0xf<<AFIO_EXTICR_position);
 800074e:	4a61      	ldr	r2, [pc, #388]	; (80008d4 <UPDATE_EXTI+0x1c0>)
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	3302      	adds	r3, #2
 8000754:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000758:	7bbb      	ldrb	r3, [r7, #14]
 800075a:	210f      	movs	r1, #15
 800075c:	fa01 f303 	lsl.w	r3, r1, r3
 8000760:	43db      	mvns	r3, r3
 8000762:	4618      	mov	r0, r3
 8000764:	495b      	ldr	r1, [pc, #364]	; (80008d4 <UPDATE_EXTI+0x1c0>)
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	4002      	ands	r2, r0
 800076a:	3302      	adds	r3, #2
 800076c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_index] |=((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_pin.GPIO_port)&0xf)<<AFIO_EXTICR_position);
 8000770:	4a58      	ldr	r2, [pc, #352]	; (80008d4 <UPDATE_EXTI+0x1c0>)
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	3302      	adds	r3, #2
 8000776:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	4956      	ldr	r1, [pc, #344]	; (80008d8 <UPDATE_EXTI+0x1c4>)
 8000780:	428b      	cmp	r3, r1
 8000782:	d016      	beq.n	80007b2 <UPDATE_EXTI+0x9e>
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	4954      	ldr	r1, [pc, #336]	; (80008dc <UPDATE_EXTI+0x1c8>)
 800078a:	428b      	cmp	r3, r1
 800078c:	d00f      	beq.n	80007ae <UPDATE_EXTI+0x9a>
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	4953      	ldr	r1, [pc, #332]	; (80008e0 <UPDATE_EXTI+0x1cc>)
 8000794:	428b      	cmp	r3, r1
 8000796:	d008      	beq.n	80007aa <UPDATE_EXTI+0x96>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	4951      	ldr	r1, [pc, #324]	; (80008e4 <UPDATE_EXTI+0x1d0>)
 800079e:	428b      	cmp	r3, r1
 80007a0:	d101      	bne.n	80007a6 <UPDATE_EXTI+0x92>
 80007a2:	2303      	movs	r3, #3
 80007a4:	e006      	b.n	80007b4 <UPDATE_EXTI+0xa0>
 80007a6:	2300      	movs	r3, #0
 80007a8:	e004      	b.n	80007b4 <UPDATE_EXTI+0xa0>
 80007aa:	2302      	movs	r3, #2
 80007ac:	e002      	b.n	80007b4 <UPDATE_EXTI+0xa0>
 80007ae:	2301      	movs	r3, #1
 80007b0:	e000      	b.n	80007b4 <UPDATE_EXTI+0xa0>
 80007b2:	2300      	movs	r3, #0
 80007b4:	7bb9      	ldrb	r1, [r7, #14]
 80007b6:	408b      	lsls	r3, r1
 80007b8:	4618      	mov	r0, r3
 80007ba:	4946      	ldr	r1, [pc, #280]	; (80008d4 <UPDATE_EXTI+0x1c0>)
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	4302      	orrs	r2, r0
 80007c0:	3302      	adds	r3, #2
 80007c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/////////////////////////////////////////////////////////////

	//3 - update rising or falling trigger
	EXTI->RTSR &=~(1<<EXTI_Config->EXTI_pin.EXTI_inputlinenubmer);
 80007c6:	4b43      	ldr	r3, [pc, #268]	; (80008d4 <UPDATE_EXTI+0x1c0>)
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	8812      	ldrh	r2, [r2, #0]
 80007ce:	4611      	mov	r1, r2
 80007d0:	2201      	movs	r2, #1
 80007d2:	408a      	lsls	r2, r1
 80007d4:	43d2      	mvns	r2, r2
 80007d6:	4611      	mov	r1, r2
 80007d8:	4a3e      	ldr	r2, [pc, #248]	; (80008d4 <UPDATE_EXTI+0x1c0>)
 80007da:	400b      	ands	r3, r1
 80007dc:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &=~(1<<EXTI_Config->EXTI_pin.EXTI_inputlinenubmer);
 80007de:	4b3d      	ldr	r3, [pc, #244]	; (80008d4 <UPDATE_EXTI+0x1c0>)
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	8812      	ldrh	r2, [r2, #0]
 80007e6:	4611      	mov	r1, r2
 80007e8:	2201      	movs	r2, #1
 80007ea:	408a      	lsls	r2, r1
 80007ec:	43d2      	mvns	r2, r2
 80007ee:	4611      	mov	r1, r2
 80007f0:	4a38      	ldr	r2, [pc, #224]	; (80008d4 <UPDATE_EXTI+0x1c0>)
 80007f2:	400b      	ands	r3, r1
 80007f4:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->TRIGER_Case == EXTI_TRIGGER_RISING)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	7b1b      	ldrb	r3, [r3, #12]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10b      	bne.n	8000816 <UPDATE_EXTI+0x102>
	{
		EXTI->RTSR |=(1<<EXTI_Config->EXTI_pin.EXTI_inputlinenubmer);
 80007fe:	4b35      	ldr	r3, [pc, #212]	; (80008d4 <UPDATE_EXTI+0x1c0>)
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	8812      	ldrh	r2, [r2, #0]
 8000806:	4611      	mov	r1, r2
 8000808:	2201      	movs	r2, #1
 800080a:	408a      	lsls	r2, r1
 800080c:	4611      	mov	r1, r2
 800080e:	4a31      	ldr	r2, [pc, #196]	; (80008d4 <UPDATE_EXTI+0x1c0>)
 8000810:	430b      	orrs	r3, r1
 8000812:	6093      	str	r3, [r2, #8]
 8000814:	e029      	b.n	800086a <UPDATE_EXTI+0x156>
	}
	else if(EXTI_Config->TRIGER_Case == EXTI_TRIGGER_FALLING)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	7b1b      	ldrb	r3, [r3, #12]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d10b      	bne.n	8000836 <UPDATE_EXTI+0x122>
	{
		EXTI->FTSR |=(1<<EXTI_Config->EXTI_pin.EXTI_inputlinenubmer);
 800081e:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <UPDATE_EXTI+0x1c0>)
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	8812      	ldrh	r2, [r2, #0]
 8000826:	4611      	mov	r1, r2
 8000828:	2201      	movs	r2, #1
 800082a:	408a      	lsls	r2, r1
 800082c:	4611      	mov	r1, r2
 800082e:	4a29      	ldr	r2, [pc, #164]	; (80008d4 <UPDATE_EXTI+0x1c0>)
 8000830:	430b      	orrs	r3, r1
 8000832:	60d3      	str	r3, [r2, #12]
 8000834:	e019      	b.n	800086a <UPDATE_EXTI+0x156>

	}else if(EXTI_Config->TRIGER_Case == EXTI_TRIGGER_RISINGandFALLING)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	7b1b      	ldrb	r3, [r3, #12]
 800083a:	2b02      	cmp	r3, #2
 800083c:	d115      	bne.n	800086a <UPDATE_EXTI+0x156>
	{
		EXTI->RTSR |=(1<<EXTI_Config->EXTI_pin.EXTI_inputlinenubmer);
 800083e:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <UPDATE_EXTI+0x1c0>)
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	8812      	ldrh	r2, [r2, #0]
 8000846:	4611      	mov	r1, r2
 8000848:	2201      	movs	r2, #1
 800084a:	408a      	lsls	r2, r1
 800084c:	4611      	mov	r1, r2
 800084e:	4a21      	ldr	r2, [pc, #132]	; (80008d4 <UPDATE_EXTI+0x1c0>)
 8000850:	430b      	orrs	r3, r1
 8000852:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |=(1<<EXTI_Config->EXTI_pin.EXTI_inputlinenubmer);
 8000854:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <UPDATE_EXTI+0x1c0>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	8812      	ldrh	r2, [r2, #0]
 800085c:	4611      	mov	r1, r2
 800085e:	2201      	movs	r2, #1
 8000860:	408a      	lsls	r2, r1
 8000862:	4611      	mov	r1, r2
 8000864:	4a1b      	ldr	r2, [pc, #108]	; (80008d4 <UPDATE_EXTI+0x1c0>)
 8000866:	430b      	orrs	r3, r1
 8000868:	60d3      	str	r3, [r2, #12]
	}


	// 4-update IRQ HAndling CALLBACK

	Gp_IRQ_CALLBACk[EXTI_Config->EXTI_pin.EXTI_inputlinenubmer]=EXTI_Config->p_IRQ_CALLBACk;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	4619      	mov	r1, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	691b      	ldr	r3, [r3, #16]
 8000874:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <UPDATE_EXTI+0x1d4>)
 8000876:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//5- ENABLE ORDISABLE IRQ EXTI & NVIC

	if(EXTI_Config->IRQ_EN==EXTI_IRQ_Enable){
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	7b5b      	ldrb	r3, [r3, #13]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d111      	bne.n	80008a6 <UPDATE_EXTI+0x192>
		EXTI->IMR |= (1<<EXTI_Config->EXTI_pin.EXTI_inputlinenubmer);
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <UPDATE_EXTI+0x1c0>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	8812      	ldrh	r2, [r2, #0]
 800088a:	4611      	mov	r1, r2
 800088c:	2201      	movs	r2, #1
 800088e:	408a      	lsls	r2, r1
 8000890:	4611      	mov	r1, r2
 8000892:	4a10      	ldr	r2, [pc, #64]	; (80008d4 <UPDATE_EXTI+0x1c0>)
 8000894:	430b      	orrs	r3, r1
 8000896:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_pin.EXTI_inputlinenubmer);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	881b      	ldrh	r3, [r3, #0]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fe6c 	bl	800057c <Enable_NVIC>





}
 80008a4:	e011      	b.n	80008ca <UPDATE_EXTI+0x1b6>
		EXTI->IMR &=~ (1<<EXTI_Config->EXTI_pin.EXTI_inputlinenubmer);
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <UPDATE_EXTI+0x1c0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	8812      	ldrh	r2, [r2, #0]
 80008ae:	4611      	mov	r1, r2
 80008b0:	2201      	movs	r2, #1
 80008b2:	408a      	lsls	r2, r1
 80008b4:	43d2      	mvns	r2, r2
 80008b6:	4611      	mov	r1, r2
 80008b8:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <UPDATE_EXTI+0x1c0>)
 80008ba:	400b      	ands	r3, r1
 80008bc:	6013      	str	r3, [r2, #0]
		disable_NVIC(EXTI_Config->EXTI_pin.EXTI_inputlinenubmer);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff febf 	bl	8000648 <disable_NVIC>
}
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40010400 	.word	0x40010400
 80008d8:	40010800 	.word	0x40010800
 80008dc:	40010c00 	.word	0x40010c00
 80008e0:	40011000 	.word	0x40011000
 80008e4:	04001400 	.word	0x04001400
 80008e8:	20000024 	.word	0x20000024

080008ec <MCAL_EXTI_GPIO_Init>:
 * @param[in]    -
 * @param[in]    -
 * @retval       -none
 * Note          -
 */
void MCAL_EXTI_GPIO_Init(EXTI_pinconfig_t* EXTI_Config){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	UPDATE_EXTI(EXTI_Config);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff ff0d 	bl	8000714 <UPDATE_EXTI>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <EXTI0_IRQHandler>:
}

/*
 * ISR FUNCTIONS
 */
void EXTI0_IRQHandler(void){
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	//clear by write 1 into the pending register (EXTI_PR)
	EXTI->PR |=1<<0;
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <EXTI0_IRQHandler+0x1c>)
 800090a:	695b      	ldr	r3, [r3, #20]
 800090c:	4a04      	ldr	r2, [pc, #16]	; (8000920 <EXTI0_IRQHandler+0x1c>)
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	6153      	str	r3, [r2, #20]
	//call IRQ_CALL
	Gp_IRQ_CALLBACk[0]();
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <EXTI0_IRQHandler+0x20>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4798      	blx	r3
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40010400 	.word	0x40010400
 8000924:	20000024 	.word	0x20000024

08000928 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void){
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	//clear by write 1 into the pending register (EXTI_PR)
	EXTI->PR |=1<<1;
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <EXTI1_IRQHandler+0x1c>)
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <EXTI1_IRQHandler+0x1c>)
 8000932:	f043 0302 	orr.w	r3, r3, #2
 8000936:	6153      	str	r3, [r2, #20]
	//call IRQ_CALL
	Gp_IRQ_CALLBACk[1]();
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <EXTI1_IRQHandler+0x20>)
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	4798      	blx	r3
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40010400 	.word	0x40010400
 8000948:	20000024 	.word	0x20000024

0800094c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	//clear by write 1 into the pending register (EXTI_PR)
	EXTI->PR |=1<<2;
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <EXTI2_IRQHandler+0x1c>)
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <EXTI2_IRQHandler+0x1c>)
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	6153      	str	r3, [r2, #20]
	//call IRQ_CALL
	Gp_IRQ_CALLBACk[2]();
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <EXTI2_IRQHandler+0x20>)
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	4798      	blx	r3
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40010400 	.word	0x40010400
 800096c:	20000024 	.word	0x20000024

08000970 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	//clear by write 1 into the pending register (EXTI_PR)
	EXTI->PR |=1<<3;
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <EXTI3_IRQHandler+0x1c>)
 8000976:	695b      	ldr	r3, [r3, #20]
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <EXTI3_IRQHandler+0x1c>)
 800097a:	f043 0308 	orr.w	r3, r3, #8
 800097e:	6153      	str	r3, [r2, #20]
	//call IRQ_CALL
	Gp_IRQ_CALLBACk[3]();
 8000980:	4b03      	ldr	r3, [pc, #12]	; (8000990 <EXTI3_IRQHandler+0x20>)
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	4798      	blx	r3
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40010400 	.word	0x40010400
 8000990:	20000024 	.word	0x20000024

08000994 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	//clear by write 1 into the pending register (EXTI_PR)
	EXTI->PR |=1<<4;
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <EXTI4_IRQHandler+0x1c>)
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <EXTI4_IRQHandler+0x1c>)
 800099e:	f043 0310 	orr.w	r3, r3, #16
 80009a2:	6153      	str	r3, [r2, #20]
	//call IRQ_CALL
	Gp_IRQ_CALLBACk[4]();
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <EXTI4_IRQHandler+0x20>)
 80009a6:	691b      	ldr	r3, [r3, #16]
 80009a8:	4798      	blx	r3
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40010400 	.word	0x40010400
 80009b4:	20000024 	.word	0x20000024

080009b8 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	if(EXTI->PR &1<<5) {EXTI->PR |= (1<<5); Gp_IRQ_CALLBACk[5]();}
 80009bc:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <EXTI9_5_IRQHandler+0xa0>)
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	f003 0320 	and.w	r3, r3, #32
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d008      	beq.n	80009da <EXTI9_5_IRQHandler+0x22>
 80009c8:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <EXTI9_5_IRQHandler+0xa0>)
 80009ca:	695b      	ldr	r3, [r3, #20]
 80009cc:	4a22      	ldr	r2, [pc, #136]	; (8000a58 <EXTI9_5_IRQHandler+0xa0>)
 80009ce:	f043 0320 	orr.w	r3, r3, #32
 80009d2:	6153      	str	r3, [r2, #20]
 80009d4:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <EXTI9_5_IRQHandler+0xa4>)
 80009d6:	695b      	ldr	r3, [r3, #20]
 80009d8:	4798      	blx	r3
	if(EXTI->PR &1<<6) {EXTI->PR |= (1<<6); Gp_IRQ_CALLBACk[6]();}
 80009da:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <EXTI9_5_IRQHandler+0xa0>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d008      	beq.n	80009f8 <EXTI9_5_IRQHandler+0x40>
 80009e6:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <EXTI9_5_IRQHandler+0xa0>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	4a1b      	ldr	r2, [pc, #108]	; (8000a58 <EXTI9_5_IRQHandler+0xa0>)
 80009ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f0:	6153      	str	r3, [r2, #20]
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <EXTI9_5_IRQHandler+0xa4>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	4798      	blx	r3
	if(EXTI->PR &1<<7) {EXTI->PR |= (1<<7); Gp_IRQ_CALLBACk[7]();}
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <EXTI9_5_IRQHandler+0xa0>)
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d008      	beq.n	8000a16 <EXTI9_5_IRQHandler+0x5e>
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <EXTI9_5_IRQHandler+0xa0>)
 8000a06:	695b      	ldr	r3, [r3, #20]
 8000a08:	4a13      	ldr	r2, [pc, #76]	; (8000a58 <EXTI9_5_IRQHandler+0xa0>)
 8000a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a0e:	6153      	str	r3, [r2, #20]
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <EXTI9_5_IRQHandler+0xa4>)
 8000a12:	69db      	ldr	r3, [r3, #28]
 8000a14:	4798      	blx	r3
	if(EXTI->PR &1<<8) {EXTI->PR |= (1<<8); Gp_IRQ_CALLBACk[8]();}
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <EXTI9_5_IRQHandler+0xa0>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d008      	beq.n	8000a34 <EXTI9_5_IRQHandler+0x7c>
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <EXTI9_5_IRQHandler+0xa0>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	4a0c      	ldr	r2, [pc, #48]	; (8000a58 <EXTI9_5_IRQHandler+0xa0>)
 8000a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a2c:	6153      	str	r3, [r2, #20]
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <EXTI9_5_IRQHandler+0xa4>)
 8000a30:	6a1b      	ldr	r3, [r3, #32]
 8000a32:	4798      	blx	r3
	if(EXTI->PR &1<<9) {EXTI->PR |= (1<<9); Gp_IRQ_CALLBACk[9]();}
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <EXTI9_5_IRQHandler+0xa0>)
 8000a36:	695b      	ldr	r3, [r3, #20]
 8000a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d008      	beq.n	8000a52 <EXTI9_5_IRQHandler+0x9a>
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <EXTI9_5_IRQHandler+0xa0>)
 8000a42:	695b      	ldr	r3, [r3, #20]
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <EXTI9_5_IRQHandler+0xa0>)
 8000a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a4a:	6153      	str	r3, [r2, #20]
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <EXTI9_5_IRQHandler+0xa4>)
 8000a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a50:	4798      	blx	r3
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40010400 	.word	0x40010400
 8000a5c:	20000024 	.word	0x20000024

08000a60 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	if(EXTI->PR &1<<10) {EXTI->PR |= (1<<10); Gp_IRQ_CALLBACk[10]();}
 8000a64:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <EXTI15_10_IRQHandler+0xbc>)
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d008      	beq.n	8000a82 <EXTI15_10_IRQHandler+0x22>
 8000a70:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <EXTI15_10_IRQHandler+0xbc>)
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	4a29      	ldr	r2, [pc, #164]	; (8000b1c <EXTI15_10_IRQHandler+0xbc>)
 8000a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a7a:	6153      	str	r3, [r2, #20]
 8000a7c:	4b28      	ldr	r3, [pc, #160]	; (8000b20 <EXTI15_10_IRQHandler+0xc0>)
 8000a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a80:	4798      	blx	r3
	if(EXTI->PR &1<<11) {EXTI->PR |= (1<<11); Gp_IRQ_CALLBACk[11]();}
 8000a82:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <EXTI15_10_IRQHandler+0xbc>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d008      	beq.n	8000aa0 <EXTI15_10_IRQHandler+0x40>
 8000a8e:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <EXTI15_10_IRQHandler+0xbc>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	4a22      	ldr	r2, [pc, #136]	; (8000b1c <EXTI15_10_IRQHandler+0xbc>)
 8000a94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a98:	6153      	str	r3, [r2, #20]
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <EXTI15_10_IRQHandler+0xc0>)
 8000a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9e:	4798      	blx	r3
	if(EXTI->PR &1<<12) {EXTI->PR |= (1<<12); Gp_IRQ_CALLBACk[12]();}
 8000aa0:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <EXTI15_10_IRQHandler+0xbc>)
 8000aa2:	695b      	ldr	r3, [r3, #20]
 8000aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d008      	beq.n	8000abe <EXTI15_10_IRQHandler+0x5e>
 8000aac:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <EXTI15_10_IRQHandler+0xbc>)
 8000aae:	695b      	ldr	r3, [r3, #20]
 8000ab0:	4a1a      	ldr	r2, [pc, #104]	; (8000b1c <EXTI15_10_IRQHandler+0xbc>)
 8000ab2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ab6:	6153      	str	r3, [r2, #20]
 8000ab8:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <EXTI15_10_IRQHandler+0xc0>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	4798      	blx	r3
	if(EXTI->PR &1<<13) {EXTI->PR |= (1<<13); Gp_IRQ_CALLBACk[13]();}
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <EXTI15_10_IRQHandler+0xbc>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d008      	beq.n	8000adc <EXTI15_10_IRQHandler+0x7c>
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <EXTI15_10_IRQHandler+0xbc>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	4a13      	ldr	r2, [pc, #76]	; (8000b1c <EXTI15_10_IRQHandler+0xbc>)
 8000ad0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ad4:	6153      	str	r3, [r2, #20]
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <EXTI15_10_IRQHandler+0xc0>)
 8000ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ada:	4798      	blx	r3
	if(EXTI->PR &1<<14) {EXTI->PR |= (1<<14); Gp_IRQ_CALLBACk[14]();}
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <EXTI15_10_IRQHandler+0xbc>)
 8000ade:	695b      	ldr	r3, [r3, #20]
 8000ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d008      	beq.n	8000afa <EXTI15_10_IRQHandler+0x9a>
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <EXTI15_10_IRQHandler+0xbc>)
 8000aea:	695b      	ldr	r3, [r3, #20]
 8000aec:	4a0b      	ldr	r2, [pc, #44]	; (8000b1c <EXTI15_10_IRQHandler+0xbc>)
 8000aee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af2:	6153      	str	r3, [r2, #20]
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <EXTI15_10_IRQHandler+0xc0>)
 8000af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000af8:	4798      	blx	r3
	if(EXTI->PR &1<<15) {EXTI->PR |= (1<<15); Gp_IRQ_CALLBACk[15]();}
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <EXTI15_10_IRQHandler+0xbc>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d008      	beq.n	8000b18 <EXTI15_10_IRQHandler+0xb8>
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <EXTI15_10_IRQHandler+0xbc>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <EXTI15_10_IRQHandler+0xbc>)
 8000b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b10:	6153      	str	r3, [r2, #20]
 8000b12:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <EXTI15_10_IRQHandler+0xc0>)
 8000b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b16:	4798      	blx	r3
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40010400 	.word	0x40010400
 8000b20:	20000024 	.word	0x20000024

08000b24 <GETPOSITION_CRLH>:
 */

#include<stm32f103c6_gpio_driver.h>


uint8_t GETPOSITION_CRLH(uint16_t pinnumber){
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	80fb      	strh	r3, [r7, #6]
	switch(pinnumber)
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	2b80      	cmp	r3, #128	; 0x80
 8000b32:	d042      	beq.n	8000bba <GETPOSITION_CRLH+0x96>
 8000b34:	2b80      	cmp	r3, #128	; 0x80
 8000b36:	dc11      	bgt.n	8000b5c <GETPOSITION_CRLH+0x38>
 8000b38:	2b08      	cmp	r3, #8
 8000b3a:	d036      	beq.n	8000baa <GETPOSITION_CRLH+0x86>
 8000b3c:	2b08      	cmp	r3, #8
 8000b3e:	dc06      	bgt.n	8000b4e <GETPOSITION_CRLH+0x2a>
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d02e      	beq.n	8000ba2 <GETPOSITION_CRLH+0x7e>
 8000b44:	2b04      	cmp	r3, #4
 8000b46:	d02e      	beq.n	8000ba6 <GETPOSITION_CRLH+0x82>
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d028      	beq.n	8000b9e <GETPOSITION_CRLH+0x7a>
 8000b4c:	e047      	b.n	8000bde <GETPOSITION_CRLH+0xba>
 8000b4e:	2b20      	cmp	r3, #32
 8000b50:	d02f      	beq.n	8000bb2 <GETPOSITION_CRLH+0x8e>
 8000b52:	2b40      	cmp	r3, #64	; 0x40
 8000b54:	d02f      	beq.n	8000bb6 <GETPOSITION_CRLH+0x92>
 8000b56:	2b10      	cmp	r3, #16
 8000b58:	d029      	beq.n	8000bae <GETPOSITION_CRLH+0x8a>
 8000b5a:	e040      	b.n	8000bde <GETPOSITION_CRLH+0xba>
 8000b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b60:	d033      	beq.n	8000bca <GETPOSITION_CRLH+0xa6>
 8000b62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b66:	dc09      	bgt.n	8000b7c <GETPOSITION_CRLH+0x58>
 8000b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b6c:	d029      	beq.n	8000bc2 <GETPOSITION_CRLH+0x9e>
 8000b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b72:	d028      	beq.n	8000bc6 <GETPOSITION_CRLH+0xa2>
 8000b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b78:	d021      	beq.n	8000bbe <GETPOSITION_CRLH+0x9a>
 8000b7a:	e030      	b.n	8000bde <GETPOSITION_CRLH+0xba>
 8000b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b80:	d027      	beq.n	8000bd2 <GETPOSITION_CRLH+0xae>
 8000b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b86:	dc03      	bgt.n	8000b90 <GETPOSITION_CRLH+0x6c>
 8000b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b8c:	d01f      	beq.n	8000bce <GETPOSITION_CRLH+0xaa>
 8000b8e:	e026      	b.n	8000bde <GETPOSITION_CRLH+0xba>
 8000b90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b94:	d01f      	beq.n	8000bd6 <GETPOSITION_CRLH+0xb2>
 8000b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b9a:	d01e      	beq.n	8000bda <GETPOSITION_CRLH+0xb6>
 8000b9c:	e01f      	b.n	8000bde <GETPOSITION_CRLH+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e01e      	b.n	8000be0 <GETPOSITION_CRLH+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	e01c      	b.n	8000be0 <GETPOSITION_CRLH+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000ba6:	2308      	movs	r3, #8
 8000ba8:	e01a      	b.n	8000be0 <GETPOSITION_CRLH+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000baa:	230c      	movs	r3, #12
 8000bac:	e018      	b.n	8000be0 <GETPOSITION_CRLH+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000bae:	2310      	movs	r3, #16
 8000bb0:	e016      	b.n	8000be0 <GETPOSITION_CRLH+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000bb2:	2314      	movs	r3, #20
 8000bb4:	e014      	b.n	8000be0 <GETPOSITION_CRLH+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000bb6:	2318      	movs	r3, #24
 8000bb8:	e012      	b.n	8000be0 <GETPOSITION_CRLH+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000bba:	231c      	movs	r3, #28
 8000bbc:	e010      	b.n	8000be0 <GETPOSITION_CRLH+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e00e      	b.n	8000be0 <GETPOSITION_CRLH+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	e00c      	b.n	8000be0 <GETPOSITION_CRLH+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000bc6:	2308      	movs	r3, #8
 8000bc8:	e00a      	b.n	8000be0 <GETPOSITION_CRLH+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000bca:	230c      	movs	r3, #12
 8000bcc:	e008      	b.n	8000be0 <GETPOSITION_CRLH+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000bce:	2310      	movs	r3, #16
 8000bd0:	e006      	b.n	8000be0 <GETPOSITION_CRLH+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000bd2:	2314      	movs	r3, #20
 8000bd4:	e004      	b.n	8000be0 <GETPOSITION_CRLH+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000bd6:	2318      	movs	r3, #24
 8000bd8:	e002      	b.n	8000be0 <GETPOSITION_CRLH+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000bda:	231c      	movs	r3, #28
 8000bdc:	e000      	b.n	8000be0 <GETPOSITION_CRLH+0xbc>
		break;


	}
	return 0;
 8000bde:	2300      	movs	r3, #0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr

08000bea <MCAL_GPIO_Init>:
 * @param[in]    -GPIOX
 * @param[in]    -PINY
 * @retval       -none
 * Note          -
 */
void MCAL_GPIO_Init(GPIO_typedef *GPIOX,GPIO_PIN_Config_t *PINConfig){
 8000bea:	b590      	push	{r4, r7, lr}
 8000bec:	b085      	sub	sp, #20
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) (x=A..G) from pin 0 to 7

	//Port configuration register high (GPIOx_CRH) (x=A..G) from pin 8 to 15
	volatile uint32_t *configregister=NULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
	uint8_t pin_config=0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73fb      	strb	r3, [r7, #15]

	configregister=(PINConfig->GPIO_pin_number<8? &GPIOX->CRL : &GPIOX->CRH );
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	2b07      	cmp	r3, #7
 8000c02:	d801      	bhi.n	8000c08 <MCAL_GPIO_Init+0x1e>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	e001      	b.n	8000c0c <MCAL_GPIO_Init+0x22>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	60bb      	str	r3, [r7, #8]
	//clear CNFy[1:0]:MODE[1:0]
	(*configregister) &=~(0xf<<GETPOSITION_CRLH(PINConfig->GPIO_pin_number));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff86 	bl	8000b24 <GETPOSITION_CRLH>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	4093      	lsls	r3, r2
 8000c20:	43da      	mvns	r2, r3
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	401a      	ands	r2, r3
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	601a      	str	r2, [r3, #0]
	//	In output mode (MODE[1:0] > 00):


	if((PINConfig->GPIO_mode == GPIO_mode_OUTPUT_AF_OD)||(PINConfig->GPIO_mode==GPIO_mode_OUTPUT_AF_PP)||(PINConfig->GPIO_mode==GPIO_mode_OUTPUT_OD)||(PINConfig->GPIO_mode==GPIO_mode_OUTPUT_PP))
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	789b      	ldrb	r3, [r3, #2]
 8000c30:	2b07      	cmp	r3, #7
 8000c32:	d00b      	beq.n	8000c4c <MCAL_GPIO_Init+0x62>
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	789b      	ldrb	r3, [r3, #2]
 8000c38:	2b06      	cmp	r3, #6
 8000c3a:	d007      	beq.n	8000c4c <MCAL_GPIO_Init+0x62>
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	789b      	ldrb	r3, [r3, #2]
 8000c40:	2b05      	cmp	r3, #5
 8000c42:	d003      	beq.n	8000c4c <MCAL_GPIO_Init+0x62>
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	789b      	ldrb	r3, [r3, #2]
 8000c48:	2b04      	cmp	r3, #4
 8000c4a:	d10e      	bne.n	8000c6a <MCAL_GPIO_Init+0x80>
	{
		//set CNFy[1:0]:MODE[1:0]
		pin_config= ((((PINConfig->GPIO_mode -4)<<2) | (PINConfig->GPIO_speed))&0x0f);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	789b      	ldrb	r3, [r3, #2]
 8000c50:	3b04      	subs	r3, #4
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	b25a      	sxtb	r2, r3
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	78db      	ldrb	r3, [r3, #3]
 8000c5a:	b25b      	sxtb	r3, r3
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	b25b      	sxtb	r3, r3
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e02c      	b.n	8000cc4 <MCAL_GPIO_Init+0xda>
	}
	else // input mode
	{
		if((PINConfig->GPIO_mode == GPIO_mode_INPUT_flo)||(PINConfig->GPIO_mode == GPIO_mode_analog))
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	789b      	ldrb	r3, [r3, #2]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d003      	beq.n	8000c7a <MCAL_GPIO_Init+0x90>
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	789b      	ldrb	r3, [r3, #2]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d107      	bne.n	8000c8a <MCAL_GPIO_Init+0xa0>
		{
			//set CNFy[1:0]:MODE[1:0]
			pin_config= ((((PINConfig->GPIO_mode )<<2) | 0x0)&0x0f);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	789b      	ldrb	r3, [r3, #2]
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	73fb      	strb	r3, [r7, #15]
 8000c88:	e01c      	b.n	8000cc4 <MCAL_GPIO_Init+0xda>
		}
		else if(PINConfig->GPIO_mode == GPIO_mode_output_AF_input)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	789b      	ldrb	r3, [r3, #2]
 8000c8e:	2b08      	cmp	r3, #8
 8000c90:	d102      	bne.n	8000c98 <MCAL_GPIO_Init+0xae>
		{
			//set CNFy[1:0]:MODE[1:0]
			pin_config= ((((GPIO_mode_INPUT_flo )<<2) | 0x0)&0x0f);
 8000c92:	2304      	movs	r3, #4
 8000c94:	73fb      	strb	r3, [r7, #15]
 8000c96:	e015      	b.n	8000cc4 <MCAL_GPIO_Init+0xda>


		}
		else //pu pd
		{
			pin_config= ((((GPIO_mode_INPUT_PU )<<2) |0x0)&0x0f);
 8000c98:	2308      	movs	r3, #8
 8000c9a:	73fb      	strb	r3, [r7, #15]
			if(PINConfig->GPIO_mode == GPIO_mode_INPUT_PU)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	789b      	ldrb	r3, [r3, #2]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d107      	bne.n	8000cb4 <MCAL_GPIO_Init+0xca>
			{
				//pxoDR =1 input pullup
				GPIOX->ODR |= PINConfig->GPIO_pin_number;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	683a      	ldr	r2, [r7, #0]
 8000caa:	8812      	ldrh	r2, [r2, #0]
 8000cac:	431a      	orrs	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	e007      	b.n	8000cc4 <MCAL_GPIO_Init+0xda>
			}
			else//pxoDR =0 input pulldown
			{
				GPIOX->ODR &=~ PINConfig->GPIO_pin_number;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	8812      	ldrh	r2, [r2, #0]
 8000cbc:	43d2      	mvns	r2, r2
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	60da      	str	r2, [r3, #12]

		}
	}
	//write on CRH CRL

	(*configregister) |=((pin_config)<<GETPOSITION_CRLH(PINConfig->GPIO_pin_number));
 8000cc4:	7bfc      	ldrb	r4, [r7, #15]
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff2a 	bl	8000b24 <GETPOSITION_CRLH>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	fa04 f203 	lsl.w	r2, r4, r3
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	601a      	str	r2, [r3, #0]



}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd90      	pop	{r4, r7, pc}

08000ce8 <MCAL_GPIO_WRITE_PIN>:
 * @param[in]    -GPIOX
 * @param[in]    -piny
 * @retval       -none
 * Note          -
 */
void MCAL_GPIO_WRITE_PIN(GPIO_typedef *GPIOX,uint8_t pinNumber,uint8_t value){
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	70fb      	strb	r3, [r7, #3]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	70bb      	strb	r3, [r7, #2]

	if(value != GPIO_PIN_RESET)
 8000cf8:	78bb      	ldrb	r3, [r7, #2]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <MCAL_GPIO_WRITE_PIN+0x1e>
	{
		//GPIOX->ODR |= pinconfiq;
		GPIOX->BSRR=(uint32_t)pinNumber;
 8000cfe:	78fa      	ldrb	r2, [r7, #3]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	611a      	str	r2, [r3, #16]
	{
		GPIOX->BRR=(uint32_t)pinNumber;

	}

}
 8000d04:	e002      	b.n	8000d0c <MCAL_GPIO_WRITE_PIN+0x24>
		GPIOX->BRR=(uint32_t)pinNumber;
 8000d06:	78fa      	ldrb	r2, [r7, #3]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	615a      	str	r2, [r3, #20]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr

08000d16 <MCAL_GPIO_WRITE_PORT>:
 * @brief 		-this function write specific port
 * @param[in]    -GPIOX
 * @retval       -none
 * Note          -
 */
void MCAL_GPIO_WRITE_PORT(GPIO_typedef *GPIOX,uint16_t value){
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	460b      	mov	r3, r1
 8000d20:	807b      	strh	r3, [r7, #2]

	GPIOX->ODR=(uint32_t)value;
 8000d22:	887a      	ldrh	r2, [r7, #2]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	60da      	str	r2, [r3, #12]

}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
	...

08000d34 <__libc_init_array>:
 8000d34:	b570      	push	{r4, r5, r6, lr}
 8000d36:	2500      	movs	r5, #0
 8000d38:	4e0c      	ldr	r6, [pc, #48]	; (8000d6c <__libc_init_array+0x38>)
 8000d3a:	4c0d      	ldr	r4, [pc, #52]	; (8000d70 <__libc_init_array+0x3c>)
 8000d3c:	1ba4      	subs	r4, r4, r6
 8000d3e:	10a4      	asrs	r4, r4, #2
 8000d40:	42a5      	cmp	r5, r4
 8000d42:	d109      	bne.n	8000d58 <__libc_init_array+0x24>
 8000d44:	f000 f81a 	bl	8000d7c <_init>
 8000d48:	2500      	movs	r5, #0
 8000d4a:	4e0a      	ldr	r6, [pc, #40]	; (8000d74 <__libc_init_array+0x40>)
 8000d4c:	4c0a      	ldr	r4, [pc, #40]	; (8000d78 <__libc_init_array+0x44>)
 8000d4e:	1ba4      	subs	r4, r4, r6
 8000d50:	10a4      	asrs	r4, r4, #2
 8000d52:	42a5      	cmp	r5, r4
 8000d54:	d105      	bne.n	8000d62 <__libc_init_array+0x2e>
 8000d56:	bd70      	pop	{r4, r5, r6, pc}
 8000d58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d5c:	4798      	blx	r3
 8000d5e:	3501      	adds	r5, #1
 8000d60:	e7ee      	b.n	8000d40 <__libc_init_array+0xc>
 8000d62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d66:	4798      	blx	r3
 8000d68:	3501      	adds	r5, #1
 8000d6a:	e7f2      	b.n	8000d52 <__libc_init_array+0x1e>
 8000d6c:	08000dbc 	.word	0x08000dbc
 8000d70:	08000dbc 	.word	0x08000dbc
 8000d74:	08000dbc 	.word	0x08000dbc
 8000d78:	08000dc0 	.word	0x08000dc0

08000d7c <_init>:
 8000d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d7e:	bf00      	nop
 8000d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d82:	bc08      	pop	{r3}
 8000d84:	469e      	mov	lr, r3
 8000d86:	4770      	bx	lr

08000d88 <_fini>:
 8000d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d8a:	bf00      	nop
 8000d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d8e:	bc08      	pop	{r3}
 8000d90:	469e      	mov	lr, r3
 8000d92:	4770      	bx	lr

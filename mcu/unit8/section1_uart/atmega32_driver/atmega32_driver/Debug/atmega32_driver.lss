
atmega32_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000608  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000608  0000069c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800066  00800066  000006a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001141  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cd  00000000  00000000  00001971  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a4e  00000000  00000000  0000223e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  00002c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b49  00000000  00000000  00002f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008da  00000000  00000000  00003ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000438b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
  8a:	0c 94 02 03 	jmp	0x604	; 0x604 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_kick>:
	datadir_lcd_port=0xff;
	lcd_control_port &=~(1<<RW_switch);//write
	
}
void lcd_kick(void){
	lcd_control_port &=~(1<<EN_switch);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	87 7f       	andi	r24, 0xF7	; 247
  96:	88 bb       	out	0x18, r24	; 24
	
	_delayms(50);
  98:	82 e3       	ldi	r24, 0x32	; 50
  9a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_delayms>
	lcd_control_port |=(1<<EN_switch);
  9e:	88 b3       	in	r24, 0x18	; 24
  a0:	88 60       	ori	r24, 0x08	; 8
  a2:	88 bb       	out	0x18, r24	; 24
  a4:	08 95       	ret

000000a6 <lcd_is_busy>:
		lcd_send_command(Entry_Mode);
		lcd_send_command(lcd_begin_f_raw);
		lcd_send_command(Display_on_Cursor_blinking);
}
void lcd_is_busy(void){
	datadir_lcd_port =0x00; //input
  a6:	1a ba       	out	0x1a, r1	; 26
	lcd_control_port |= (1<<RW_switch); //read
  a8:	88 b3       	in	r24, 0x18	; 24
  aa:	84 60       	ori	r24, 0x04	; 4
  ac:	88 bb       	out	0x18, r24	; 24
	lcd_control_port &=~(1<<RS_switch);
  ae:	88 b3       	in	r24, 0x18	; 24
  b0:	8d 7f       	andi	r24, 0xFD	; 253
  b2:	88 bb       	out	0x18, r24	; 24
	lcd_kick();
  b4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_kick>
	datadir_lcd_port=0xff;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	8a bb       	out	0x1a, r24	; 26
	lcd_control_port &=~(1<<RW_switch);//write
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	8b 7f       	andi	r24, 0xFB	; 251
  c0:	88 bb       	out	0x18, r24	; 24
  c2:	08 95       	ret

000000c4 <lcd_send_command>:
	
	_delayms(50);
	lcd_control_port |=(1<<EN_switch);
	
}
void lcd_send_command(unsigned char command){
  c4:	cf 93       	push	r28
  c6:	c8 2f       	mov	r28, r24
	#ifdef eight_bit_mode
		lcd_is_busy();
  c8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_is_busy>
		lcd_data_port =command;
  cc:	cb bb       	out	0x1b, r28	; 27
		lcd_control_port &=~ ((1<<RW_switch)|(1<<RS_switch));
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	89 7f       	andi	r24, 0xF9	; 249
  d2:	88 bb       	out	0x18, r24	; 24
		lcd_kick();
  d4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_kick>
	lcd_kick();
	lcd_data_port =(lcd_data_port&0x0f)|(command<<4);
	lcd_control_port &=~ ((1<<RW_switch)|(1<<RS_switch));
	lcd_kick();
	#endif
}
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <lcd_send_char>:
void lcd_send_char(unsigned char character){
  dc:	cf 93       	push	r28
  de:	c8 2f       	mov	r28, r24
	#ifdef eight_bit_mode
	lcd_is_busy();
  e0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_is_busy>
	lcd_data_port =character;
  e4:	cb bb       	out	0x1b, r28	; 27
	lcd_control_port |= (1<<RS_switch);
  e6:	88 b3       	in	r24, 0x18	; 24
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	88 bb       	out	0x18, r24	; 24
	lcd_control_port &=~(1<<RW_switch); //write
  ec:	88 b3       	in	r24, 0x18	; 24
  ee:	8b 7f       	andi	r24, 0xFB	; 251
  f0:	88 bb       	out	0x18, r24	; 24
	
	
	lcd_kick();
  f2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_kick>
	lcd_data_port =(lcd_data_port&0x0f)|(character<<4);
	lcd_control_port |= ((1<<RS_switch));
	lcd_control_port &=~(1<<RW_switch);
	lcd_kick();
	#endif
}
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <lcd_clear_screen>:
	
	
}

void lcd_clear_screen(){
	lcd_send_command(Clear_Display);
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_send_command>
 100:	08 95       	ret

00000102 <lcd_init>:
 *  Author: soft
 */ 
#include "lcd.h"

void lcd_init(void){
	_delayms(20);
 102:	84 e1       	ldi	r24, 0x14	; 20
 104:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_delayms>
	//lcd_is_busy();
	datadir_lcd_control_port |= ((1<<EN_switch)|(1<<RS_switch)|(1<<RW_switch));//output
 108:	87 b3       	in	r24, 0x17	; 23
 10a:	8e 60       	ori	r24, 0x0E	; 14
 10c:	87 bb       	out	0x17, r24	; 23
	lcd_control_port &=~((1<<EN_switch)|(1<<RW_switch)|(1<<RS_switch)); //set to 0
 10e:	88 b3       	in	r24, 0x18	; 24
 110:	81 7f       	andi	r24, 0xF1	; 241
 112:	88 bb       	out	0x18, r24	; 24
	
	datadir_lcd_port =0xff; //output
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	8a bb       	out	0x1a, r24	; 26
	_delayms(15);
 118:	8f e0       	ldi	r24, 0x0F	; 15
 11a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_delayms>
	
	lcd_clear_screen();
 11e:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_clear_screen>
	
	#ifdef eight_bit_mode
		lcd_send_command(Set_8_bit);
 122:	88 e3       	ldi	r24, 0x38	; 56
 124:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_send_command>
	#endif
	#ifdef four_bit_mode
		//lcd_send_command(0x02);
		lcd_send_command(Set_4_bit);
	#endif
		lcd_send_command(Entry_Mode);
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_send_command>
		lcd_send_command(lcd_begin_f_raw);
 12e:	80 e8       	ldi	r24, 0x80	; 128
 130:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_send_command>
		lcd_send_command(Display_on_Cursor_blinking);
 134:	8f e0       	ldi	r24, 0x0F	; 15
 136:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_send_command>
 13a:	08 95       	ret

0000013c <lcd_GotoXY>:
void lcd_clear_screen(){
	lcd_send_command(Clear_Display);
	
}
void lcd_GotoXY(unsigned char line ,unsigned char position){
	if(line ==0)
 13c:	81 11       	cpse	r24, r1
 13e:	07 c0       	rjmp	.+14     	; 0x14e <lcd_GotoXY+0x12>
	{
		if(position<16 && position >=0)
 140:	60 31       	cpi	r22, 0x10	; 16
 142:	68 f4       	brcc	.+26     	; 0x15e <lcd_GotoXY+0x22>
		{
			lcd_send_command(lcd_begin_f_raw+position);
 144:	80 e8       	ldi	r24, 0x80	; 128
 146:	86 0f       	add	r24, r22
 148:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_send_command>
 14c:	08 95       	ret
		}
	}
	else if(line ==1)
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	31 f4       	brne	.+12     	; 0x15e <lcd_GotoXY+0x22>
	{
		if(position<16 && position >=0)
 152:	60 31       	cpi	r22, 0x10	; 16
 154:	20 f4       	brcc	.+8      	; 0x15e <lcd_GotoXY+0x22>
		{
			lcd_send_command(lcd_begin_S_raw+position);
 156:	80 ec       	ldi	r24, 0xC0	; 192
 158:	86 0f       	add	r24, r22
 15a:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_send_command>
 15e:	08 95       	ret

00000160 <lcd_send_string>:
	lcd_control_port |= ((1<<RS_switch));
	lcd_control_port &=~(1<<RW_switch);
	lcd_kick();
	#endif
}
void lcd_send_string(char *string){
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	8c 01       	movw	r16, r24
	
	//lcd_is_busy();
	int count=0; //count how much char on line 
 16a:	c0 e0       	ldi	r28, 0x00	; 0
 16c:	d0 e0       	ldi	r29, 0x00	; 0
	while(*string>0)
 16e:	19 c0       	rjmp	.+50     	; 0x1a2 <lcd_send_string+0x42>
	{
		count ++;
 170:	21 96       	adiw	r28, 0x01	; 1
		lcd_send_char(*string++);
 172:	0f 5f       	subi	r16, 0xFF	; 255
 174:	1f 4f       	sbci	r17, 0xFF	; 255
 176:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_send_char>
		if(count==16)
 17a:	c0 31       	cpi	r28, 0x10	; 16
 17c:	d1 05       	cpc	r29, r1
 17e:	29 f4       	brne	.+10     	; 0x18a <lcd_send_string+0x2a>
		{
			lcd_GotoXY(1,0);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_GotoXY>
 188:	0c c0       	rjmp	.+24     	; 0x1a2 <lcd_send_string+0x42>
		}
		else if(count ==32||count ==33)
 18a:	ce 01       	movw	r24, r28
 18c:	80 97       	sbiw	r24, 0x20	; 32
 18e:	02 97       	sbiw	r24, 0x02	; 2
 190:	40 f4       	brcc	.+16     	; 0x1a2 <lcd_send_string+0x42>
		{
			lcd_clear_screen();
 192:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_clear_screen>
			lcd_GotoXY(0,0);
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_GotoXY>
			count =0;
 19e:	c0 e0       	ldi	r28, 0x00	; 0
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
}
void lcd_send_string(char *string){
	
	//lcd_is_busy();
	int count=0; //count how much char on line 
	while(*string>0)
 1a2:	f8 01       	movw	r30, r16
 1a4:	80 81       	ld	r24, Z
 1a6:	81 11       	cpse	r24, r1
 1a8:	e3 cf       	rjmp	.-58     	; 0x170 <lcd_send_string+0x10>
			count =0;
		}
	}
	
	
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	08 95       	ret

000001b4 <main>:
#include "MCAL/UART_driver/atmega32_uart_driver.h"
#include "HAL/LCD_driver/lcd.h"
int main(void)
{
	
   lcd_init();
 1b4:	0e 94 81 00 	call	0x102	; 0x102 <lcd_init>
    while (1) 
    {
		lcd_send_command(Display_on_Cursor_blinking);
 1b8:	8f e0       	ldi	r24, 0x0F	; 15
 1ba:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_send_command>
		lcd_send_char('A');
 1be:	81 e4       	ldi	r24, 0x41	; 65
 1c0:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_send_char>
		lcd_clear_screen();
 1c4:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_clear_screen>
		lcd_send_string("ahmed");
 1c8:	80 e6       	ldi	r24, 0x60	; 96
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_send_string>
 1d0:	f3 cf       	rjmp	.-26     	; 0x1b8 <main+0x4>

000001d2 <_delayms>:
	
	
	
}
void _delayms(uint8_t delay)
{
 1d2:	cf 92       	push	r12
 1d4:	df 92       	push	r13
 1d6:	ef 92       	push	r14
 1d8:	ff 92       	push	r15
 1da:	cf 93       	push	r28
	
	
	
	uint8_t n_flows=((delay / 0.256)+1);
 1dc:	68 2f       	mov	r22, r24
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 76 02 	call	0x4ec	; 0x4ec <__floatsisf>
 1e8:	6b 01       	movw	r12, r22
 1ea:	7c 01       	movw	r14, r24
 1ec:	2f e6       	ldi	r18, 0x6F	; 111
 1ee:	32 e1       	ldi	r19, 0x12	; 18
 1f0:	43 e8       	ldi	r20, 0x83	; 131
 1f2:	5e e3       	ldi	r21, 0x3E	; 62
 1f4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__divsf3>
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	40 e8       	ldi	r20, 0x80	; 128
 1fe:	5f e3       	ldi	r21, 0x3F	; 63
 200:	0e 94 67 01 	call	0x2ce	; 0x2ce <__addsf3>
 204:	0e 94 45 02 	call	0x48a	; 0x48a <__fixunssfsi>
 208:	c6 2f       	mov	r28, r22
	uint8_t counter=0;
	uint8_t start= (256-((delay /0.001)/n_flows));
 20a:	2f e6       	ldi	r18, 0x6F	; 111
 20c:	32 e1       	ldi	r19, 0x12	; 18
 20e:	43 e8       	ldi	r20, 0x83	; 131
 210:	5a e3       	ldi	r21, 0x3A	; 58
 212:	c7 01       	movw	r24, r14
 214:	b6 01       	movw	r22, r12
 216:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__divsf3>
 21a:	6b 01       	movw	r12, r22
 21c:	7c 01       	movw	r14, r24
 21e:	6c 2f       	mov	r22, r28
 220:	70 e0       	ldi	r23, 0x00	; 0
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 76 02 	call	0x4ec	; 0x4ec <__floatsisf>
 22a:	9b 01       	movw	r18, r22
 22c:	ac 01       	movw	r20, r24
 22e:	c7 01       	movw	r24, r14
 230:	b6 01       	movw	r22, r12
 232:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__divsf3>
 236:	9b 01       	movw	r18, r22
 238:	ac 01       	movw	r20, r24
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	80 e8       	ldi	r24, 0x80	; 128
 240:	93 e4       	ldi	r25, 0x43	; 67
 242:	0e 94 66 01 	call	0x2cc	; 0x2cc <__subsf3>
 246:	0e 94 45 02 	call	0x48a	; 0x48a <__fixunssfsi>
	myTCNT0=start;//set initial
 24a:	62 bf       	out	0x32, r22	; 50
	
	myTCCR0 &= ~((1<<2)|(1<<0));  // 8
 24c:	83 b7       	in	r24, 0x33	; 51
 24e:	8a 7f       	andi	r24, 0xFA	; 250
 250:	83 bf       	out	0x33, r24	; 51
	myTCCR0 |= (1<<1);
 252:	83 b7       	in	r24, 0x33	; 51
 254:	82 60       	ori	r24, 0x02	; 2
 256:	83 bf       	out	0x33, r24	; 51
{
	
	
	
	uint8_t n_flows=((delay / 0.256)+1);
	uint8_t counter=0;
 258:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t start= (256-((delay /0.001)/n_flows));
	myTCNT0=start;//set initial
	
	myTCCR0 &= ~((1<<2)|(1<<0));  // 8
	myTCCR0 |= (1<<1);
	while(counter <n_flows)// delay 5s
 25a:	07 c0       	rjmp	.+14     	; 0x26a <_delayms+0x98>
	{
		while((myTIFR &(1<<0))==0);
 25c:	08 b6       	in	r0, 0x38	; 56
 25e:	00 fe       	sbrs	r0, 0
 260:	fd cf       	rjmp	.-6      	; 0x25c <_delayms+0x8a>
		// clear flag
		myTIFR |= (1<<0);
 262:	88 b7       	in	r24, 0x38	; 56
 264:	81 60       	ori	r24, 0x01	; 1
 266:	88 bf       	out	0x38, r24	; 56
		counter++;
 268:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t start= (256-((delay /0.001)/n_flows));
	myTCNT0=start;//set initial
	
	myTCCR0 &= ~((1<<2)|(1<<0));  // 8
	myTCCR0 |= (1<<1);
	while(counter <n_flows)// delay 5s
 26a:	9c 17       	cp	r25, r28
 26c:	b8 f3       	brcs	.-18     	; 0x25c <_delayms+0x8a>
	
	counter =0;
	// stop timer
	//myTCCR0=0x00;
	
 26e:	cf 91       	pop	r28
 270:	ff 90       	pop	r15
 272:	ef 90       	pop	r14
 274:	df 90       	pop	r13
 276:	cf 90       	pop	r12
 278:	08 95       	ret

0000027a <__vector_13>:
	
	


ISR(USART_RXC)
{
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	2f 93       	push	r18
 286:	3f 93       	push	r19
 288:	4f 93       	push	r20
 28a:	5f 93       	push	r21
 28c:	6f 93       	push	r22
 28e:	7f 93       	push	r23
 290:	8f 93       	push	r24
 292:	9f 93       	push	r25
 294:	af 93       	push	r26
 296:	bf 93       	push	r27
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31
	if(uart0.txc_interrupt_call !=NULL_ptr )
 29c:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <__data_end+0xd>
 2a0:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <__data_end+0xe>
 2a4:	30 97       	sbiw	r30, 0x00	; 0
 2a6:	09 f0       	breq	.+2      	; 0x2aa <__vector_13+0x30>
	{
		uart0.txc_interrupt_call();
 2a8:	09 95       	icall
	else
	{
		
		// handle error
	}
}
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	bf 91       	pop	r27
 2b0:	af 91       	pop	r26
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	7f 91       	pop	r23
 2b8:	6f 91       	pop	r22
 2ba:	5f 91       	pop	r21
 2bc:	4f 91       	pop	r20
 2be:	3f 91       	pop	r19
 2c0:	2f 91       	pop	r18
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <__subsf3>:
 2cc:	50 58       	subi	r21, 0x80	; 128

000002ce <__addsf3>:
 2ce:	bb 27       	eor	r27, r27
 2d0:	aa 27       	eor	r26, r26
 2d2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__addsf3x>
 2d6:	0c 94 c8 02 	jmp	0x590	; 0x590 <__fp_round>
 2da:	0e 94 ba 02 	call	0x574	; 0x574 <__fp_pscA>
 2de:	38 f0       	brcs	.+14     	; 0x2ee <__addsf3+0x20>
 2e0:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_pscB>
 2e4:	20 f0       	brcs	.+8      	; 0x2ee <__addsf3+0x20>
 2e6:	39 f4       	brne	.+14     	; 0x2f6 <__addsf3+0x28>
 2e8:	9f 3f       	cpi	r25, 0xFF	; 255
 2ea:	19 f4       	brne	.+6      	; 0x2f2 <__addsf3+0x24>
 2ec:	26 f4       	brtc	.+8      	; 0x2f6 <__addsf3+0x28>
 2ee:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__fp_nan>
 2f2:	0e f4       	brtc	.+2      	; 0x2f6 <__addsf3+0x28>
 2f4:	e0 95       	com	r30
 2f6:	e7 fb       	bst	r30, 7
 2f8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_inf>

000002fc <__addsf3x>:
 2fc:	e9 2f       	mov	r30, r25
 2fe:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__fp_split3>
 302:	58 f3       	brcs	.-42     	; 0x2da <__addsf3+0xc>
 304:	ba 17       	cp	r27, r26
 306:	62 07       	cpc	r22, r18
 308:	73 07       	cpc	r23, r19
 30a:	84 07       	cpc	r24, r20
 30c:	95 07       	cpc	r25, r21
 30e:	20 f0       	brcs	.+8      	; 0x318 <__addsf3x+0x1c>
 310:	79 f4       	brne	.+30     	; 0x330 <__addsf3x+0x34>
 312:	a6 f5       	brtc	.+104    	; 0x37c <__addsf3x+0x80>
 314:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_zero>
 318:	0e f4       	brtc	.+2      	; 0x31c <__addsf3x+0x20>
 31a:	e0 95       	com	r30
 31c:	0b 2e       	mov	r0, r27
 31e:	ba 2f       	mov	r27, r26
 320:	a0 2d       	mov	r26, r0
 322:	0b 01       	movw	r0, r22
 324:	b9 01       	movw	r22, r18
 326:	90 01       	movw	r18, r0
 328:	0c 01       	movw	r0, r24
 32a:	ca 01       	movw	r24, r20
 32c:	a0 01       	movw	r20, r0
 32e:	11 24       	eor	r1, r1
 330:	ff 27       	eor	r31, r31
 332:	59 1b       	sub	r21, r25
 334:	99 f0       	breq	.+38     	; 0x35c <__addsf3x+0x60>
 336:	59 3f       	cpi	r21, 0xF9	; 249
 338:	50 f4       	brcc	.+20     	; 0x34e <__addsf3x+0x52>
 33a:	50 3e       	cpi	r21, 0xE0	; 224
 33c:	68 f1       	brcs	.+90     	; 0x398 <__addsf3x+0x9c>
 33e:	1a 16       	cp	r1, r26
 340:	f0 40       	sbci	r31, 0x00	; 0
 342:	a2 2f       	mov	r26, r18
 344:	23 2f       	mov	r18, r19
 346:	34 2f       	mov	r19, r20
 348:	44 27       	eor	r20, r20
 34a:	58 5f       	subi	r21, 0xF8	; 248
 34c:	f3 cf       	rjmp	.-26     	; 0x334 <__addsf3x+0x38>
 34e:	46 95       	lsr	r20
 350:	37 95       	ror	r19
 352:	27 95       	ror	r18
 354:	a7 95       	ror	r26
 356:	f0 40       	sbci	r31, 0x00	; 0
 358:	53 95       	inc	r21
 35a:	c9 f7       	brne	.-14     	; 0x34e <__addsf3x+0x52>
 35c:	7e f4       	brtc	.+30     	; 0x37c <__addsf3x+0x80>
 35e:	1f 16       	cp	r1, r31
 360:	ba 0b       	sbc	r27, r26
 362:	62 0b       	sbc	r22, r18
 364:	73 0b       	sbc	r23, r19
 366:	84 0b       	sbc	r24, r20
 368:	ba f0       	brmi	.+46     	; 0x398 <__addsf3x+0x9c>
 36a:	91 50       	subi	r25, 0x01	; 1
 36c:	a1 f0       	breq	.+40     	; 0x396 <__addsf3x+0x9a>
 36e:	ff 0f       	add	r31, r31
 370:	bb 1f       	adc	r27, r27
 372:	66 1f       	adc	r22, r22
 374:	77 1f       	adc	r23, r23
 376:	88 1f       	adc	r24, r24
 378:	c2 f7       	brpl	.-16     	; 0x36a <__addsf3x+0x6e>
 37a:	0e c0       	rjmp	.+28     	; 0x398 <__addsf3x+0x9c>
 37c:	ba 0f       	add	r27, r26
 37e:	62 1f       	adc	r22, r18
 380:	73 1f       	adc	r23, r19
 382:	84 1f       	adc	r24, r20
 384:	48 f4       	brcc	.+18     	; 0x398 <__addsf3x+0x9c>
 386:	87 95       	ror	r24
 388:	77 95       	ror	r23
 38a:	67 95       	ror	r22
 38c:	b7 95       	ror	r27
 38e:	f7 95       	ror	r31
 390:	9e 3f       	cpi	r25, 0xFE	; 254
 392:	08 f0       	brcs	.+2      	; 0x396 <__addsf3x+0x9a>
 394:	b0 cf       	rjmp	.-160    	; 0x2f6 <__addsf3+0x28>
 396:	93 95       	inc	r25
 398:	88 0f       	add	r24, r24
 39a:	08 f0       	brcs	.+2      	; 0x39e <__addsf3x+0xa2>
 39c:	99 27       	eor	r25, r25
 39e:	ee 0f       	add	r30, r30
 3a0:	97 95       	ror	r25
 3a2:	87 95       	ror	r24
 3a4:	08 95       	ret

000003a6 <__divsf3>:
 3a6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__divsf3x>
 3aa:	0c 94 c8 02 	jmp	0x590	; 0x590 <__fp_round>
 3ae:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_pscB>
 3b2:	58 f0       	brcs	.+22     	; 0x3ca <__divsf3+0x24>
 3b4:	0e 94 ba 02 	call	0x574	; 0x574 <__fp_pscA>
 3b8:	40 f0       	brcs	.+16     	; 0x3ca <__divsf3+0x24>
 3ba:	29 f4       	brne	.+10     	; 0x3c6 <__divsf3+0x20>
 3bc:	5f 3f       	cpi	r21, 0xFF	; 255
 3be:	29 f0       	breq	.+10     	; 0x3ca <__divsf3+0x24>
 3c0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_inf>
 3c4:	51 11       	cpse	r21, r1
 3c6:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_szero>
 3ca:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__fp_nan>

000003ce <__divsf3x>:
 3ce:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__fp_split3>
 3d2:	68 f3       	brcs	.-38     	; 0x3ae <__divsf3+0x8>

000003d4 <__divsf3_pse>:
 3d4:	99 23       	and	r25, r25
 3d6:	b1 f3       	breq	.-20     	; 0x3c4 <__divsf3+0x1e>
 3d8:	55 23       	and	r21, r21
 3da:	91 f3       	breq	.-28     	; 0x3c0 <__divsf3+0x1a>
 3dc:	95 1b       	sub	r25, r21
 3de:	55 0b       	sbc	r21, r21
 3e0:	bb 27       	eor	r27, r27
 3e2:	aa 27       	eor	r26, r26
 3e4:	62 17       	cp	r22, r18
 3e6:	73 07       	cpc	r23, r19
 3e8:	84 07       	cpc	r24, r20
 3ea:	38 f0       	brcs	.+14     	; 0x3fa <__divsf3_pse+0x26>
 3ec:	9f 5f       	subi	r25, 0xFF	; 255
 3ee:	5f 4f       	sbci	r21, 0xFF	; 255
 3f0:	22 0f       	add	r18, r18
 3f2:	33 1f       	adc	r19, r19
 3f4:	44 1f       	adc	r20, r20
 3f6:	aa 1f       	adc	r26, r26
 3f8:	a9 f3       	breq	.-22     	; 0x3e4 <__divsf3_pse+0x10>
 3fa:	35 d0       	rcall	.+106    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 3fc:	0e 2e       	mov	r0, r30
 3fe:	3a f0       	brmi	.+14     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 400:	e0 e8       	ldi	r30, 0x80	; 128
 402:	32 d0       	rcall	.+100    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 404:	91 50       	subi	r25, 0x01	; 1
 406:	50 40       	sbci	r21, 0x00	; 0
 408:	e6 95       	lsr	r30
 40a:	00 1c       	adc	r0, r0
 40c:	ca f7       	brpl	.-14     	; 0x400 <__EEPROM_REGION_LENGTH__>
 40e:	2b d0       	rcall	.+86     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 410:	fe 2f       	mov	r31, r30
 412:	29 d0       	rcall	.+82     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 414:	66 0f       	add	r22, r22
 416:	77 1f       	adc	r23, r23
 418:	88 1f       	adc	r24, r24
 41a:	bb 1f       	adc	r27, r27
 41c:	26 17       	cp	r18, r22
 41e:	37 07       	cpc	r19, r23
 420:	48 07       	cpc	r20, r24
 422:	ab 07       	cpc	r26, r27
 424:	b0 e8       	ldi	r27, 0x80	; 128
 426:	09 f0       	breq	.+2      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 428:	bb 0b       	sbc	r27, r27
 42a:	80 2d       	mov	r24, r0
 42c:	bf 01       	movw	r22, r30
 42e:	ff 27       	eor	r31, r31
 430:	93 58       	subi	r25, 0x83	; 131
 432:	5f 4f       	sbci	r21, 0xFF	; 255
 434:	3a f0       	brmi	.+14     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 436:	9e 3f       	cpi	r25, 0xFE	; 254
 438:	51 05       	cpc	r21, r1
 43a:	78 f0       	brcs	.+30     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 43c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_inf>
 440:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_szero>
 444:	5f 3f       	cpi	r21, 0xFF	; 255
 446:	e4 f3       	brlt	.-8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 448:	98 3e       	cpi	r25, 0xE8	; 232
 44a:	d4 f3       	brlt	.-12     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 44c:	86 95       	lsr	r24
 44e:	77 95       	ror	r23
 450:	67 95       	ror	r22
 452:	b7 95       	ror	r27
 454:	f7 95       	ror	r31
 456:	9f 5f       	subi	r25, 0xFF	; 255
 458:	c9 f7       	brne	.-14     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 45a:	88 0f       	add	r24, r24
 45c:	91 1d       	adc	r25, r1
 45e:	96 95       	lsr	r25
 460:	87 95       	ror	r24
 462:	97 f9       	bld	r25, 7
 464:	08 95       	ret
 466:	e1 e0       	ldi	r30, 0x01	; 1
 468:	66 0f       	add	r22, r22
 46a:	77 1f       	adc	r23, r23
 46c:	88 1f       	adc	r24, r24
 46e:	bb 1f       	adc	r27, r27
 470:	62 17       	cp	r22, r18
 472:	73 07       	cpc	r23, r19
 474:	84 07       	cpc	r24, r20
 476:	ba 07       	cpc	r27, r26
 478:	20 f0       	brcs	.+8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 47a:	62 1b       	sub	r22, r18
 47c:	73 0b       	sbc	r23, r19
 47e:	84 0b       	sbc	r24, r20
 480:	ba 0b       	sbc	r27, r26
 482:	ee 1f       	adc	r30, r30
 484:	88 f7       	brcc	.-30     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 486:	e0 95       	com	r30
 488:	08 95       	ret

0000048a <__fixunssfsi>:
 48a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__fp_splitA>
 48e:	88 f0       	brcs	.+34     	; 0x4b2 <__fixunssfsi+0x28>
 490:	9f 57       	subi	r25, 0x7F	; 127
 492:	98 f0       	brcs	.+38     	; 0x4ba <__fixunssfsi+0x30>
 494:	b9 2f       	mov	r27, r25
 496:	99 27       	eor	r25, r25
 498:	b7 51       	subi	r27, 0x17	; 23
 49a:	b0 f0       	brcs	.+44     	; 0x4c8 <__fixunssfsi+0x3e>
 49c:	e1 f0       	breq	.+56     	; 0x4d6 <__fixunssfsi+0x4c>
 49e:	66 0f       	add	r22, r22
 4a0:	77 1f       	adc	r23, r23
 4a2:	88 1f       	adc	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	1a f0       	brmi	.+6      	; 0x4ae <__fixunssfsi+0x24>
 4a8:	ba 95       	dec	r27
 4aa:	c9 f7       	brne	.-14     	; 0x49e <__fixunssfsi+0x14>
 4ac:	14 c0       	rjmp	.+40     	; 0x4d6 <__fixunssfsi+0x4c>
 4ae:	b1 30       	cpi	r27, 0x01	; 1
 4b0:	91 f0       	breq	.+36     	; 0x4d6 <__fixunssfsi+0x4c>
 4b2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fp_zero>
 4b6:	b1 e0       	ldi	r27, 0x01	; 1
 4b8:	08 95       	ret
 4ba:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_zero>
 4be:	67 2f       	mov	r22, r23
 4c0:	78 2f       	mov	r23, r24
 4c2:	88 27       	eor	r24, r24
 4c4:	b8 5f       	subi	r27, 0xF8	; 248
 4c6:	39 f0       	breq	.+14     	; 0x4d6 <__fixunssfsi+0x4c>
 4c8:	b9 3f       	cpi	r27, 0xF9	; 249
 4ca:	cc f3       	brlt	.-14     	; 0x4be <__fixunssfsi+0x34>
 4cc:	86 95       	lsr	r24
 4ce:	77 95       	ror	r23
 4d0:	67 95       	ror	r22
 4d2:	b3 95       	inc	r27
 4d4:	d9 f7       	brne	.-10     	; 0x4cc <__fixunssfsi+0x42>
 4d6:	3e f4       	brtc	.+14     	; 0x4e6 <__fixunssfsi+0x5c>
 4d8:	90 95       	com	r25
 4da:	80 95       	com	r24
 4dc:	70 95       	com	r23
 4de:	61 95       	neg	r22
 4e0:	7f 4f       	sbci	r23, 0xFF	; 255
 4e2:	8f 4f       	sbci	r24, 0xFF	; 255
 4e4:	9f 4f       	sbci	r25, 0xFF	; 255
 4e6:	08 95       	ret

000004e8 <__floatunsisf>:
 4e8:	e8 94       	clt
 4ea:	09 c0       	rjmp	.+18     	; 0x4fe <__floatsisf+0x12>

000004ec <__floatsisf>:
 4ec:	97 fb       	bst	r25, 7
 4ee:	3e f4       	brtc	.+14     	; 0x4fe <__floatsisf+0x12>
 4f0:	90 95       	com	r25
 4f2:	80 95       	com	r24
 4f4:	70 95       	com	r23
 4f6:	61 95       	neg	r22
 4f8:	7f 4f       	sbci	r23, 0xFF	; 255
 4fa:	8f 4f       	sbci	r24, 0xFF	; 255
 4fc:	9f 4f       	sbci	r25, 0xFF	; 255
 4fe:	99 23       	and	r25, r25
 500:	a9 f0       	breq	.+42     	; 0x52c <__floatsisf+0x40>
 502:	f9 2f       	mov	r31, r25
 504:	96 e9       	ldi	r25, 0x96	; 150
 506:	bb 27       	eor	r27, r27
 508:	93 95       	inc	r25
 50a:	f6 95       	lsr	r31
 50c:	87 95       	ror	r24
 50e:	77 95       	ror	r23
 510:	67 95       	ror	r22
 512:	b7 95       	ror	r27
 514:	f1 11       	cpse	r31, r1
 516:	f8 cf       	rjmp	.-16     	; 0x508 <__floatsisf+0x1c>
 518:	fa f4       	brpl	.+62     	; 0x558 <__floatsisf+0x6c>
 51a:	bb 0f       	add	r27, r27
 51c:	11 f4       	brne	.+4      	; 0x522 <__floatsisf+0x36>
 51e:	60 ff       	sbrs	r22, 0
 520:	1b c0       	rjmp	.+54     	; 0x558 <__floatsisf+0x6c>
 522:	6f 5f       	subi	r22, 0xFF	; 255
 524:	7f 4f       	sbci	r23, 0xFF	; 255
 526:	8f 4f       	sbci	r24, 0xFF	; 255
 528:	9f 4f       	sbci	r25, 0xFF	; 255
 52a:	16 c0       	rjmp	.+44     	; 0x558 <__floatsisf+0x6c>
 52c:	88 23       	and	r24, r24
 52e:	11 f0       	breq	.+4      	; 0x534 <__floatsisf+0x48>
 530:	96 e9       	ldi	r25, 0x96	; 150
 532:	11 c0       	rjmp	.+34     	; 0x556 <__floatsisf+0x6a>
 534:	77 23       	and	r23, r23
 536:	21 f0       	breq	.+8      	; 0x540 <__floatsisf+0x54>
 538:	9e e8       	ldi	r25, 0x8E	; 142
 53a:	87 2f       	mov	r24, r23
 53c:	76 2f       	mov	r23, r22
 53e:	05 c0       	rjmp	.+10     	; 0x54a <__floatsisf+0x5e>
 540:	66 23       	and	r22, r22
 542:	71 f0       	breq	.+28     	; 0x560 <__floatsisf+0x74>
 544:	96 e8       	ldi	r25, 0x86	; 134
 546:	86 2f       	mov	r24, r22
 548:	70 e0       	ldi	r23, 0x00	; 0
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	2a f0       	brmi	.+10     	; 0x558 <__floatsisf+0x6c>
 54e:	9a 95       	dec	r25
 550:	66 0f       	add	r22, r22
 552:	77 1f       	adc	r23, r23
 554:	88 1f       	adc	r24, r24
 556:	da f7       	brpl	.-10     	; 0x54e <__floatsisf+0x62>
 558:	88 0f       	add	r24, r24
 55a:	96 95       	lsr	r25
 55c:	87 95       	ror	r24
 55e:	97 f9       	bld	r25, 7
 560:	08 95       	ret

00000562 <__fp_inf>:
 562:	97 f9       	bld	r25, 7
 564:	9f 67       	ori	r25, 0x7F	; 127
 566:	80 e8       	ldi	r24, 0x80	; 128
 568:	70 e0       	ldi	r23, 0x00	; 0
 56a:	60 e0       	ldi	r22, 0x00	; 0
 56c:	08 95       	ret

0000056e <__fp_nan>:
 56e:	9f ef       	ldi	r25, 0xFF	; 255
 570:	80 ec       	ldi	r24, 0xC0	; 192
 572:	08 95       	ret

00000574 <__fp_pscA>:
 574:	00 24       	eor	r0, r0
 576:	0a 94       	dec	r0
 578:	16 16       	cp	r1, r22
 57a:	17 06       	cpc	r1, r23
 57c:	18 06       	cpc	r1, r24
 57e:	09 06       	cpc	r0, r25
 580:	08 95       	ret

00000582 <__fp_pscB>:
 582:	00 24       	eor	r0, r0
 584:	0a 94       	dec	r0
 586:	12 16       	cp	r1, r18
 588:	13 06       	cpc	r1, r19
 58a:	14 06       	cpc	r1, r20
 58c:	05 06       	cpc	r0, r21
 58e:	08 95       	ret

00000590 <__fp_round>:
 590:	09 2e       	mov	r0, r25
 592:	03 94       	inc	r0
 594:	00 0c       	add	r0, r0
 596:	11 f4       	brne	.+4      	; 0x59c <__fp_round+0xc>
 598:	88 23       	and	r24, r24
 59a:	52 f0       	brmi	.+20     	; 0x5b0 <__fp_round+0x20>
 59c:	bb 0f       	add	r27, r27
 59e:	40 f4       	brcc	.+16     	; 0x5b0 <__fp_round+0x20>
 5a0:	bf 2b       	or	r27, r31
 5a2:	11 f4       	brne	.+4      	; 0x5a8 <__fp_round+0x18>
 5a4:	60 ff       	sbrs	r22, 0
 5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <__fp_round+0x20>
 5a8:	6f 5f       	subi	r22, 0xFF	; 255
 5aa:	7f 4f       	sbci	r23, 0xFF	; 255
 5ac:	8f 4f       	sbci	r24, 0xFF	; 255
 5ae:	9f 4f       	sbci	r25, 0xFF	; 255
 5b0:	08 95       	ret

000005b2 <__fp_split3>:
 5b2:	57 fd       	sbrc	r21, 7
 5b4:	90 58       	subi	r25, 0x80	; 128
 5b6:	44 0f       	add	r20, r20
 5b8:	55 1f       	adc	r21, r21
 5ba:	59 f0       	breq	.+22     	; 0x5d2 <__fp_splitA+0x10>
 5bc:	5f 3f       	cpi	r21, 0xFF	; 255
 5be:	71 f0       	breq	.+28     	; 0x5dc <__fp_splitA+0x1a>
 5c0:	47 95       	ror	r20

000005c2 <__fp_splitA>:
 5c2:	88 0f       	add	r24, r24
 5c4:	97 fb       	bst	r25, 7
 5c6:	99 1f       	adc	r25, r25
 5c8:	61 f0       	breq	.+24     	; 0x5e2 <__fp_splitA+0x20>
 5ca:	9f 3f       	cpi	r25, 0xFF	; 255
 5cc:	79 f0       	breq	.+30     	; 0x5ec <__fp_splitA+0x2a>
 5ce:	87 95       	ror	r24
 5d0:	08 95       	ret
 5d2:	12 16       	cp	r1, r18
 5d4:	13 06       	cpc	r1, r19
 5d6:	14 06       	cpc	r1, r20
 5d8:	55 1f       	adc	r21, r21
 5da:	f2 cf       	rjmp	.-28     	; 0x5c0 <__fp_split3+0xe>
 5dc:	46 95       	lsr	r20
 5de:	f1 df       	rcall	.-30     	; 0x5c2 <__fp_splitA>
 5e0:	08 c0       	rjmp	.+16     	; 0x5f2 <__fp_splitA+0x30>
 5e2:	16 16       	cp	r1, r22
 5e4:	17 06       	cpc	r1, r23
 5e6:	18 06       	cpc	r1, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	f1 cf       	rjmp	.-30     	; 0x5ce <__fp_splitA+0xc>
 5ec:	86 95       	lsr	r24
 5ee:	71 05       	cpc	r23, r1
 5f0:	61 05       	cpc	r22, r1
 5f2:	08 94       	sec
 5f4:	08 95       	ret

000005f6 <__fp_zero>:
 5f6:	e8 94       	clt

000005f8 <__fp_szero>:
 5f8:	bb 27       	eor	r27, r27
 5fa:	66 27       	eor	r22, r22
 5fc:	77 27       	eor	r23, r23
 5fe:	cb 01       	movw	r24, r22
 600:	97 f9       	bld	r25, 7
 602:	08 95       	ret

00000604 <_exit>:
 604:	f8 94       	cli

00000606 <__stop_program>:
 606:	ff cf       	rjmp	.-2      	; 0x606 <__stop_program>
